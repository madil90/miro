#line 2 "..\\lexer.cpp"
/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 94
#define YY_END_OF_BUFFER 95
static yyconst short int yy_accept[602] =
    {   0,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   95,   93,   91,   92,
       88,   93,   90,   88,   85,   88,   84,   93,   93,   93,
       93,   14,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   89,   94,   91,   88,   94,   90,   88,   85,   88,
       84,   94,   94,   94,   94,   94,   14,   94,   94,   94,
       94,   94,   94,   94,   94,   89,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,

       94,   94,   94,   94,   94,   94,   91,   88,    0,   90,
       88,   85,    0,   87,   85,   84,    0,    0,    0,    0,
        0,    0,    0,   14,    0,    0,    0,    0,    0,   10,
        0,    0,    0,   15,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   35,   44,   45,   46,   41,   42,   43,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   56,   57,   55,   60,
       58,   61,    0,   86,   85,    0,    0,    0,    0,    3,

        0,    0,   12,    0,    0,    0,   10,   11,    0,    0,
       15,    0,    0,    0,    0,    4,    0,    0,    0,    5,
        0,    0,   68,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   33,    0,   36,    0,   32,
       35,   44,   45,   46,   41,   42,   43,    0,    0,    0,
        0,    0,    0,    0,   72,    0,    0,   76,    0,    0,
        0,    0,    0,    0,    0,   56,   57,   55,   60,   58,
       59,   61,    6,    7,    8,    0,    3,    0,    0,   12,
        0,    0,    0,   11,    0,   49,    0,    0,    0,    0,
        0,    4,    0,   13,    0,    5,    0,    0,   68,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   33,    0,   36,    0,   32,    0,   50,    0,
       77,    0,    0,    0,   72,    0,    0,   76,    0,    0,
        0,    0,    0,    0,    0,   59,    6,    7,    8,    9,
        0,    0,    0,    0,    0,   69,    0,   49,    0,    0,
        0,    0,   67,    0,   13,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   17,
        0,    0,    0,    0,   51,   50,    0,   77,    0,   70,
       71,    0,   75,    0,    0,    0,    0,    0,    0,   62,
        9,   31,    0,    1,   16,    0,   69,    0,    0,    0,

       65,   67,   81,   47,    0,    0,    0,    0,    0,    0,
        0,    0,   18,    0,    0,    0,    0,   17,    0,    0,
        0,    0,   34,   51,    0,    0,   70,   71,    0,   75,
        0,   80,    0,   82,   83,   48,   62,   31,    2,    1,
       16,    0,    0,    0,    0,   65,   81,   47,    0,    0,
        0,    0,    0,    0,    0,    0,   18,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   34,    0,    0,   73,
        0,   80,   79,   82,   83,   48,    2,   52,    0,    0,
        0,    0,   40,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   20,   21,    0,    0,    0,    0,

        0,   53,    0,   73,    0,   79,   52,    0,   64,    0,
       66,   40,    0,   23,    0,    0,    0,    0,   24,    0,
        0,   20,   21,    0,    0,    0,    0,    0,   53,    0,
       78,    0,   64,   63,   66,    0,   23,    0,    0,    0,
        0,   24,    0,    0,    0,    0,    0,   39,    0,   78,
        0,   63,    0,    0,    0,    0,   30,    0,    0,    0,
       22,    0,   37,   39,   74,    0,    0,    0,    0,   30,
        0,    0,    0,   22,   38,   37,   74,    0,    0,    0,
        0,   27,   25,    0,   38,   54,    0,    0,   26,   27,
       25,    0,   54,   19,   29,   26,   28,   19,   29,   28,

        0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    1,    1,    1,    6,
        6,    9,   10,   11,   10,   12,   13,   14,   15,   16,
       17,   14,   14,   14,   14,   14,   14,   18,    1,    1,
        6,    1,    1,    1,   19,   19,   19,   19,   20,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   21,   22,   19,
        1,   23,    1,    1,   24,    1,   25,   26,   27,   28,

       29,   30,   31,   32,   33,   19,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,    6,    1,   50,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[51] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    1,
        1,    4,    3,    3,    3,    3,    3,    3,    4,    4,
        4,    4,    3,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    1
    } ;

static yyconst short int yy_base[605] =
    {   0,
        0,    0,   50,    0,   76,    0,   98,  119,  137,  149,
      161,  173,  106,  181,  201,  223,  229,  247,  267,  287,
      307,  327,  342,  348,  368,  388, 1194, 1195,  108, 1195,
      112,    0,    0,  155,  264,  146,  324, 1183,   82,   91,
     1159,  185, 1156, 1153,  145,  144,   94, 1151,  113,   80,
     1159, 1195, 1195,  219,  192,    0,    0,  233,  414,  205,
      421, 1177,  191,  160,  214, 1153,  409, 1152, 1149, 1154,
      133,  238,  357, 1157, 1148, 1195,  262, 1142, 1146, 1140,
      204,  222,  243, 1138,  308, 1143,  343, 1134,  228, 1145,
      322, 1140,  252, 1134,  261, 1146, 1132, 1136, 1131, 1138,

      263,  101, 1141,  269, 1128,  419,  404,  241, 1157,    0,
      447,  449, 1153, 1195,  456,  467,  474, 1124, 1128, 1135,
     1123, 1116, 1115,  308, 1131, 1116, 1116, 1111, 1121,  314,
     1120, 1107, 1107,  316, 1109, 1105, 1103, 1120, 1107, 1111,
      286, 1105,  194, 1106, 1113, 1100, 1094, 1100, 1098, 1102,
     1091, 1095, 1096, 1087, 1089, 1101, 1099,  338,  316,  353,
     1085,  345,  383,  397,  415,  420,  437,  452, 1088,  369,
     1087, 1095,  426, 1090,  451, 1080, 1078,  457,  433, 1077,
     1082, 1082, 1080, 1088, 1078, 1086,  475,  492,  493,  498,
      499,  500, 1106, 1105,  492, 1069, 1073, 1072, 1079,  508,

     1082, 1080,  509, 1079, 1061, 1071,  510,  514, 1073, 1069,
      515,  516, 1068, 1074, 1063,  520, 1068, 1053, 1070,  521,
     1057, 1068,  522, 1058,  526, 1049, 1065, 1063, 1057, 1055,
     1043, 1046, 1041, 1040, 1041,  527, 1056,  528, 1046,  532,
      534,  538,  539,  540,  544,  545,  546, 1035, 1050, 1041,
     1051, 1046, 1037, 1035,  551, 1029, 1033,  552, 1041, 1041,
     1029, 1024, 1033, 1022, 1035,  553,  557,  558,  559,  564,
      565,  569,  570,  571,  575, 1022,  576, 1036, 1026,  577,
     1035, 1034, 1015,  581, 1016,  582,  583, 1031,  587, 1012,
     1025,  588, 1012,  592, 1011,  593, 1009, 1013,  594, 1018,

      598, 1009, 1004, 1011, 1020, 1012,  599, 1005, 1007,  998,
     1008,  996,  600, 1003,  604,  605,  606,  998,  610, 1007,
      611, 1008,  991,  992,  612, 1007,  990,  616,  993, 1000,
      993,  998,  982,  996,  977,  620,  622,  624,  626,  630,
      998,  987,  992,  985,  982,  631,  985,  632,  974,  636,
      991,  986,  641,  985,  642,  984,  977,  980,  969,  974,
      975,  643,  972,  963,  647,  964,  967,  974,  973,  648,
      957,  649,  653,  957,  654,  655,  956,  659,  955,  660,
      661,  966,  665,  954,  954,  965,  952,  950,  950,  666,
      671,  675,  961,  677,  681,  962,  687,  963,  946,  943,

      689,  691,  693,  695,  960,  949,  945,  949,  954,  697,
      955,  699,  701,  954,  703,  936,  936,  705,  935,  707,
      946,  936,  709,  711,  932,  939,  713,  715,  942,  717,
      937,  719,  927,  721,  725,  727,  729,  731,  735,  739,
      745,  939,  932,  933,  924,  746,  747,  751,  921,  934,
      918,  918,  752,  917,  753,  927,  757,  931,  758,  932,
      759,  744,  765,  927,  918,  921,  766,  905,  914,  767,
      908,  771,  772,  773,  777,  778,  782,  784,  926,  902,
      915,  918,  788,  909,  903,  793,  902,  911,  910,  903,
      911,  900,  794,  896,  795,  799,  800,  904,  804,  905,

      898,  805,  897,  809,  885,  810,  811,  893,  815,  884,
      816,  822,  902,  823,  886,  890,  898,  883,  824,  886,
      881,  828,  829,  883,  833,  849,  829,  776,  834,  778,
      835,  753,  839,  840,  845,  846,  847,  710,  692,  684,
      649,  851,  652,  648,  646,  620,  607,  852,  585,  853,
      527,  857,  858,  497,  423,  417,  859,  416,  408,  404,
      863,  397,  864,  865,  869,  373,  370,  370,  337,  874,
      314,  314,  308,  875,  876,  881,  882,  283,  249,  218,
      207,  886,  887,  172,  888,  892,  172,  170,  893,  894,
      898,  146,  899,  900,  904,  905,  906,  910,  911,  912,

     1195,  157,  917,  919
    } ;

static yyconst short int yy_def[605] =
    {   0,
      601,    1,  601,    3,    3,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,  601,  601,  601,  601,
      601,  602,  603,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  602,  603,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,

      601,  601,  601,  601,  601,  601,  601,  601,  604,  603,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  604,  604,  601,  601,  601,  601,  601,  601,

      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,

      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,

      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,

      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,

        0,  601,  601,  601
    } ;

static yyconst short int yy_nxt[1246] =
    {   0,
       28,   29,   30,   29,   29,   31,   32,   33,   31,   31,
       34,   35,   36,   37,   37,   37,   37,   28,   28,   38,
       28,   28,   31,   28,   39,   28,   40,   41,   42,   28,
       43,   28,   44,   28,   45,   46,   28,   28,   47,   28,
       48,   49,   50,   28,   51,   28,   28,   28,   28,   52,
       53,   54,   30,   54,   54,   55,   56,   57,   55,   55,
       58,   59,   60,   61,   61,   61,   61,   53,   53,   62,
       53,   53,   55,   53,   63,   64,   65,   66,   67,   68,
       69,   70,   53,   53,   71,   53,   53,   53,   72,   53,
       53,   73,   74,   53,   53,   75,   53,   53,   53,   76,

       77,   53,   78,   79,  142,   80,   53,   53,  118,  107,
       81,  107,  107,  108,   82,  121,  108,   83,  107,   84,
      143,   53,   63,  119,  120,   66,  134,   53,  122,  183,
       91,  135,   71,   92,   85,   53,   86,  136,  122,  138,
       71,   53,   87,   63,   93,  139,   66,  108,   53,   53,
      108,  140,  141,   71,  114,   85,  111,   86,  107,  111,
      109,   63,   53,   87,   66,  107,   53,   88,  132,  130,
      131,   89,  133,   63,  597,   86,   66,  129,   53,   88,
       53,  130,  131,   89,  145,   63,  124,   86,   66,  124,
       53,   90,   53,  108,  117,   71,  108,   63,  595,   86,

       66,  146,   53,   90,   53,   91,  108,   71,   92,  108,
       53,   86,  594,  114,  592,   71,   53,  118,  221,   93,
      107,  125,  107,  107,   53,   63,  222,   94,   66,  107,
       53,  126,  119,  120,  111,   71,  107,  111,  147,   95,
      130,  160,  108,  107,   53,  108,   96,   63,  589,   94,
       66,  122,   53,   63,  134,   97,   98,   71,   53,  161,
      588,   95,  151,   71,  130,  170,   53,   86,   96,  152,
      134,   63,   53,   97,   98,  139,   53,  112,  112,  112,
      112,   71,  155,  113,  134,   86,  587,  182,  118,  174,
       53,   63,  113,  134,   66,  139,   53,  185,  176,   99,

      157,   71,  155,  119,  120,   86,  122,  100,  101,  124,
       53,   63,  124,  586,   66,  207,   53,  211,  207,   99,
      211,   71,  163,  164,  165,   86,  218,  100,  101,  219,
       53,   63,  584,  102,   66,  115,   53,  116,  116,  116,
      116,   71,  237,  113,  583,   86,  241,  103,  118,  241,
       53,   63,  113,  102,   66,  582,   53,  166,  167,  168,
      238,   71,  172,  119,  120,   86,   63,  103,  104,   66,
       53,   53,   63,  581,  104,   66,   71,   53,  236,  201,
       86,  153,   71,  208,  242,   53,   86,  242,  154,  139,
      239,   53,   63,  249,  580,   66,  155,   53,  243,  208,

      105,  243,   71,  106,  579,  107,   86,  107,  107,  578,
      124,   53,   63,  124,  107,   66,  244,   53,  117,  244,
      105,  245,   71,  106,  245,  575,   86,  112,  112,  112,
      112,   53,  115,  113,  116,  116,  116,  116,  246,  573,
      113,  246,  113,  187,  572,  125,  188,  189,  111,  113,
      107,  111,  571,  247,  569,  126,  247,  107,  568,  190,
      191,  192,  112,  112,  112,  112,  252,  201,  113,  112,
      112,  112,  112,  258,  201,  113,  266,  113,  115,  266,
      116,  116,  116,  116,  113,  254,  113,  195,  195,  195,
      195,  257,  200,  267,  268,  113,  267,  268,  200,  269,

      270,  272,  269,  270,  272,  195,  195,  195,  195,  277,
      280,  207,  277,  280,  207,  284,  211,  287,  284,  211,
      287,  292,  296,  299,  292,  296,  299,  301,  313,  315,
      301,  313,  315,  317,  567,  241,  317,  271,  241,  242,
      243,  244,  242,  243,  244,  245,  246,  247,  245,  246,
      247,  288,  325,  328,  266,  325,  328,  266,  267,  268,
      269,  267,  268,  269,  566,  270,  336,  302,  270,  336,
      272,  337,  338,  272,  337,  338,  339,  277,  280,  339,
      277,  280,  284,  348,  287,  284,  348,  287,  350,  292,
      340,  350,  292,  355,  296,  299,  355,  296,  299,  301,

      365,  313,  301,  365,  313,  315,  373,  317,  315,  373,
      317,  376,  378,  325,  376,  378,  325,  328,  288,  565,
      328,  336,  351,  337,  336,  338,  337,  339,  338,  374,
      339,  391,  397,  348,  391,  397,  348,  350,  563,  302,
      350,  366,  402,  355,  410,  402,  355,  410,  365,  418,
      420,  365,  418,  420,  373,  424,  376,  373,  424,  376,
      378,  427,  428,  378,  427,  428,  430,  437,  562,  430,
      437,  351,  391,  411,  561,  391,  438,  374,  440,  438,
      560,  440,  441,  421,  559,  441,  558,  422,  397,  366,
      446,  397,  402,  446,  447,  402,  448,  447,  410,  448,

      455,  410,  457,  455,  459,  457,  418,  459,  420,  418,
      467,  420,  424,  467,  427,  424,  428,  427,  430,  428,
      472,  430,  474,  472,  557,  474,  475,  411,  476,  475,
      437,  476,  438,  437,  556,  438,  477,  456,  460,  477,
      440,  421,  555,  440,  461,  422,  441,  446,  447,  441,
      446,  447,  448,  486,  455,  448,  486,  455,  457,  459,
      493,  457,  459,  493,  495,  496,  497,  467,  504,  497,
      467,  504,  472,  506,  474,  472,  506,  474,  475,  476,
      487,  475,  476,  477,  551,  507,  477,  494,  507,  512,
      488,  456,  512,  460,  486,  493,  522,  486,  493,  522,

      523,  497,  549,  523,  497,  525,  529,  498,  525,  529,
      504,  506,  507,  504,  506,  507,  533,  535,  548,  533,
      535,  487,  494,  512,  537,  542,  512,  537,  542,  522,
      523,  488,  522,  523,  525,  529,  550,  525,  529,  550,
      533,  552,  498,  533,  552,  526,  535,  553,  537,  535,
      553,  537,  542,  564,  550,  542,  564,  550,  552,  553,
      570,  552,  553,  570,  574,  576,  564,  574,  576,  564,
      577,  547,  554,  577,  526,  570,  574,  585,  570,  574,
      585,  546,  576,  577,  554,  576,  577,  590,  591,  585,
      590,  591,  585,  593,  596,  590,  593,  596,  590,  591,

      593,  598,  591,  593,  598,  599,  596,  600,  599,  596,
      600,  598,  599,  600,  598,  599,  600,  110,  545,  110,
      110,  193,  193,  544,  543,  541,  540,  539,  538,  536,
      534,  532,  531,  530,  528,  527,  524,  521,  520,  519,
      518,  517,  516,  515,  514,  513,  511,  510,  509,  508,
      505,  503,  502,  501,  500,  499,  492,  491,  490,  489,
      485,  484,  483,  482,  481,  480,  479,  478,  473,  471,
      470,  469,  468,  466,  465,  464,  463,  462,  458,  454,
      453,  452,  451,  450,  449,  445,  444,  443,  442,  439,
      436,  435,  434,  433,  432,  431,  429,  426,  425,  423,

      419,  417,  416,  415,  414,  413,  412,  409,  408,  407,
      406,  405,  404,  403,  401,  400,  399,  398,  396,  395,
      394,  393,  392,  390,  389,  388,  387,  386,  385,  384,
      383,  382,  381,  380,  379,  377,  375,  372,  371,  370,
      369,  368,  367,  364,  363,  362,  361,  360,  359,  358,
      357,  356,  354,  353,  352,  349,  347,  346,  345,  344,
      343,  342,  341,  335,  334,  333,  332,  331,  330,  329,
      327,  326,  324,  323,  322,  321,  320,  319,  318,  316,
      314,  312,  311,  310,  309,  308,  307,  306,  305,  304,
      303,  300,  298,  297,  295,  294,  293,  291,  290,  289,

      286,  285,  283,  282,  281,  279,  278,  276,  275,  274,
      273,  194,  194,  265,  264,  263,  262,  261,  260,  259,
      256,  255,  253,  251,  250,  248,  240,  235,  234,  218,
      233,  232,  231,  230,  229,  228,  227,  226,  225,  224,
      223,  220,  217,  216,  215,  214,  213,  212,  210,  209,
      208,  206,  205,  204,  203,  202,  201,  200,  199,  198,
      197,  196,  117,  194,  186,  184,  181,  180,  179,  178,
      177,  175,  173,  171,  169,  134,  162,  159,  158,  122,
      156,  142,  150,  149,  148,  123,  117,  144,  137,  128,
      127,  123,  117,  601,   27,  601,  601,  601,  601,  601,

      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601
    } ;

static yyconst short int yy_chk[1246] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        5,    5,    5,    5,   50,    5,    5,    5,   39,   29,
        5,   29,   29,   31,    5,   40,   31,    5,   29,    5,
       50,    5,    7,   39,   39,    7,   47,    7,   40,  102,
       13,   47,    7,   13,    7,   13,    7,   47,  102,   49,
       13,    7,    7,    8,   13,   49,    8,   36,    8,   13,
       36,   49,   49,    8,   36,    8,   34,    8,   34,   34,
      602,    9,    8,    8,    9,   34,    9,    9,   46,   71,
       71,    9,   46,   10,  592,    9,   10,   45,   10,   10,
        9,   45,   45,   10,   64,   11,   42,   10,   11,   42,
       11,   11,   10,   55,   42,   11,   55,   12,  588,   11,

       12,   64,   12,   12,   11,   14,   60,   12,   14,   60,
       14,   12,  587,   60,  584,   14,   12,   63,  143,   14,
       54,   42,   54,   54,   14,   15,  143,   15,   15,   54,
       15,   42,   63,   63,   58,   15,   58,   58,   65,   15,
       81,   81,  108,   58,   15,  108,   15,   16,  581,   16,
       16,   65,   16,   17,   82,   17,   17,   16,   17,   82,
      580,   16,   72,   17,   89,   89,   16,   17,   16,   72,
       72,   18,   17,   18,   18,   83,   18,   35,   35,   35,
       35,   18,   83,   35,   93,   18,  579,  101,   77,   93,
       18,   19,   35,   95,   19,  101,   19,  104,   95,   19,

       77,   19,  101,   77,   77,   19,  104,   19,   19,  124,
       19,   20,  124,  578,   20,  130,   20,  134,  130,   20,
      134,   20,   85,   85,   85,   20,  141,   20,   20,  141,
       20,   21,  573,   21,   21,   37,   21,   37,   37,   37,
       37,   21,  159,   37,  572,   21,  162,   21,   91,  162,
       21,   22,   37,   22,   22,  571,   22,   87,   87,   87,
      159,   22,   91,   91,   91,   22,   23,   22,   23,   23,
       22,   23,   24,  569,   24,   24,   23,   24,  158,  158,
       23,   73,   24,  160,  163,   23,   24,  163,   73,   73,
      160,   24,   25,  170,  568,   25,   73,   25,  164,  170,

       25,  164,   25,   25,  567,  107,   25,  107,  107,  566,
       67,   25,   26,   67,  107,   26,  165,   26,   67,  165,
       26,  166,   26,   26,  166,  562,   26,   59,   59,   59,
       59,   26,   61,   59,   61,   61,   61,   61,  167,  560,
       61,  167,   59,  106,  559,   67,  106,  106,  111,   61,
      111,  111,  558,  168,  556,   67,  168,  111,  555,  106,
      106,  106,  112,  112,  112,  112,  173,  173,  112,  115,
      115,  115,  115,  179,  179,  115,  187,  112,  116,  187,
      116,  116,  116,  116,  115,  175,  116,  117,  117,  117,
      117,  178,  175,  188,  189,  116,  188,  189,  178,  190,

      191,  192,  190,  191,  192,  195,  195,  195,  195,  200,
      203,  207,  200,  203,  207,  208,  211,  212,  208,  211,
      212,  216,  220,  223,  216,  220,  223,  225,  236,  238,
      225,  236,  238,  240,  554,  241,  240,  191,  241,  242,
      243,  244,  242,  243,  244,  245,  246,  247,  245,  246,
      247,  212,  255,  258,  266,  255,  258,  266,  267,  268,
      269,  267,  268,  269,  551,  270,  271,  225,  270,  271,
      272,  273,  274,  272,  273,  274,  275,  277,  280,  275,
      277,  280,  284,  286,  287,  284,  286,  287,  289,  292,
      275,  289,  292,  294,  296,  299,  294,  296,  299,  301,

      307,  313,  301,  307,  313,  315,  316,  317,  315,  316,
      317,  319,  321,  325,  319,  321,  325,  328,  287,  549,
      328,  336,  289,  337,  336,  338,  337,  339,  338,  316,
      339,  340,  346,  348,  340,  346,  348,  350,  547,  301,
      350,  307,  353,  355,  362,  353,  355,  362,  365,  370,
      372,  365,  370,  372,  373,  375,  376,  373,  375,  376,
      378,  380,  381,  378,  380,  381,  383,  390,  546,  383,
      390,  350,  391,  362,  545,  391,  392,  373,  394,  392,
      544,  394,  395,  372,  543,  395,  541,  372,  397,  365,
      401,  397,  402,  401,  403,  402,  404,  403,  410,  404,

      412,  410,  413,  412,  415,  413,  418,  415,  420,  418,
      423,  420,  424,  423,  427,  424,  428,  427,  430,  428,
      432,  430,  434,  432,  540,  434,  435,  410,  436,  435,
      437,  436,  438,  437,  539,  438,  439,  412,  415,  439,
      440,  420,  538,  440,  415,  420,  441,  446,  447,  441,
      446,  447,  448,  453,  455,  448,  453,  455,  457,  459,
      461,  457,  459,  461,  462,  462,  463,  467,  470,  463,
      467,  470,  472,  473,  474,  472,  473,  474,  475,  476,
      453,  475,  476,  477,  532,  478,  477,  461,  478,  483,
      453,  455,  483,  459,  486,  493,  495,  486,  493,  495,

      496,  497,  530,  496,  497,  499,  502,  463,  499,  502,
      504,  506,  507,  504,  506,  507,  509,  511,  528,  509,
      511,  486,  493,  512,  514,  519,  512,  514,  519,  522,
      523,  486,  522,  523,  525,  529,  531,  525,  529,  531,
      533,  534,  497,  533,  534,  499,  535,  536,  537,  535,
      536,  537,  542,  548,  550,  542,  548,  550,  552,  553,
      557,  552,  553,  557,  561,  563,  564,  561,  563,  564,
      565,  527,  536,  565,  525,  570,  574,  575,  570,  574,
      575,  526,  576,  577,  553,  576,  577,  582,  583,  585,
      582,  583,  585,  586,  589,  590,  586,  589,  590,  591,

      593,  594,  591,  593,  594,  595,  596,  597,  595,  596,
      597,  598,  599,  600,  598,  599,  600,  603,  524,  603,
      603,  604,  604,  521,  520,  518,  517,  516,  515,  513,
      510,  508,  505,  503,  501,  500,  498,  494,  492,  491,
      490,  489,  488,  487,  485,  484,  482,  481,  480,  479,
      471,  469,  468,  466,  465,  464,  460,  458,  456,  454,
      452,  451,  450,  449,  445,  444,  443,  442,  433,  431,
      429,  426,  425,  422,  421,  419,  417,  416,  414,  411,
      409,  408,  407,  406,  405,  400,  399,  398,  396,  393,
      389,  388,  387,  386,  385,  384,  382,  379,  377,  374,

      371,  369,  368,  367,  366,  364,  363,  361,  360,  359,
      358,  357,  356,  354,  352,  351,  349,  347,  345,  344,
      343,  342,  341,  335,  334,  333,  332,  331,  330,  329,
      327,  326,  324,  323,  322,  320,  318,  314,  312,  311,
      310,  309,  308,  306,  305,  304,  303,  302,  300,  298,
      297,  295,  293,  291,  290,  288,  285,  283,  282,  281,
      279,  278,  276,  265,  264,  263,  262,  261,  260,  259,
      257,  256,  254,  253,  252,  251,  250,  249,  248,  239,
      237,  235,  234,  233,  232,  231,  230,  229,  228,  227,
      226,  224,  222,  221,  219,  218,  217,  215,  214,  213,

      210,  209,  206,  205,  204,  202,  201,  199,  198,  197,
      196,  194,  193,  186,  185,  184,  183,  182,  181,  180,
      177,  176,  174,  172,  171,  169,  161,  157,  156,  155,
      154,  153,  152,  151,  150,  149,  148,  147,  146,  145,
      144,  142,  140,  139,  138,  137,  136,  135,  133,  132,
      131,  129,  128,  127,  126,  125,  123,  122,  121,  120,
      119,  118,  113,  109,  105,  103,  100,   99,   98,   97,
       96,   94,   92,   90,   88,   86,   84,   80,   79,   78,
       75,   74,   70,   69,   68,   66,   62,   51,   48,   44,
       43,   41,   38,   27,  601,  601,  601,  601,  601,  601,

      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
#define INITIAL 0
#define YY_NEVER_INTERACTIVE 1
#define YY_STACK_USED 1
#line 6 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
#include <stdio.h>
#include <string.h>
#include "miro.h"
#include "parse.cpp.h"

int yyline=1;
#define global 1

#define camera 2

#define triangle 3

#define mesh 4

#define instance 5

#define light 6

#define pointlight 7

#define dirlight 8

#define areaLight 9

#define sphere 10

#define square 11

#define material_phong 12

#line 872 "..\\lexer.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 39 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"


#line 1022 "..\\lexer.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 602 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1195 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 41 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return ENABLE; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 42 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return DISABLE; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 43 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return MATH_COS; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 44 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return MATH_SIN; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 45 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return MATH_TAN; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 46 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return MATH_ACOS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 47 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return MATH_ASIN; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 48 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return MATH_ATAN; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 49 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return MATH_ATAN2; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 50 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return MATH_LN; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 51 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return MATH_LOG; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 52 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return MATH_EXP; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 53 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return MATH_SQRT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 54 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return MATH_E; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 55 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return MATH_PI; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 57 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ yy_push_state(global); return GLOBAL; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 58 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return WIDTH; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 59 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return HEIGHT; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 60 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return BGCOLOR; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 61 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{return SAMPLESX;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 62 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{return SAMPLESY;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 63 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{return SHUTTERTIME;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 64 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{return BSPSPLITS;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 65 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{return PATHTRACE;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 66 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{return PHOTONMAP;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 67 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{return CAUSTICPHOTONS;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 68 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{return INDIRECTPHOTONS;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 69 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{return PHOTONSESTIMATE;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 70 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{return CAUSTICESTIMATE;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 71 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{return FINALGATHER;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 73 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ yy_push_state(camera); return CAMERA; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 74 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return POS; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 75 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return DIR; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 76 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return LOOKAT; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 77 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return UP; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 78 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return FOV; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 79 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{return FOCALLENGTH;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 80 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{return APERTURESIZE;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 81 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{return FOCALPOINT;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 83 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ yy_push_state(triangle); return TRIANGLE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 84 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return V1; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 85 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return V2; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 86 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return V3; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 87 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return N1; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 88 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return N2; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 89 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return N3; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 91 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ yy_push_state(square); return SQUARE;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 92 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return CENTER; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 94 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ yy_push_state(mesh); return MESH; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 95 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return LOAD; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 96 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return GROUP; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 98 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ yy_push_state(instance); return INSTANCE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 99 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return GEOMETRY; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 101 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{yy_push_state(material_phong); return MATERIAL_PHONG;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 102 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{return ME;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 103 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{return MA;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 104 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{return MD;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 105 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{return MS;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 106 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{return MSP;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 107 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{return MR;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 108 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{return MT;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 109 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{return INDEX;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 111 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return PUSHMATRIX; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 112 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return POPMATRIX; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 113 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return ROTATE; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 114 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return TRANSLATE; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 115 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return SCALE; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 116 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return VELOCITY;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 118 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ yy_push_state(light); return LIGHT; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 119 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ yy_pop_state(); yy_push_state(pointlight); return POINTLIGHT; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 120 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return COLOR; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 121 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return POS; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 122 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return WATTAGE; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 124 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ yy_pop_state(); yy_push_state(dirlight); return DIRLIGHT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 125 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return COLOR;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 126 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return DIR;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 128 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ yy_pop_state(); yy_push_state(areaLight); return AREALIGHT;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 129 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{return INTENSITY;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 130 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{return SAMPLES;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 131 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{return RENDERLIGHT;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 133 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ yy_push_state(sphere); return SPHERE; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 134 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return CENTER; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 135 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ return RADIUS; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 137 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{
  yylval.integer = atoi(yytext);
  return PARSE_INT;
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 142 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{
  yylval.real = atof(yytext);
  return REAL;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 147 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{
  yylval.str = strdup(yytext);
  return STRING;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 152 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ // C style comments
  register int c;
  for ( ; ; ) {
    while ((c = yyinput()) != '*' && c != EOF ) if (c == '\n') yyline++;
    if ( c == '*' ) {
      while ( (c = yyinput()) == '*' ) if (c == '\n') yyline++;
	  if ( c == '/' )
	    break;    /* found the end */
      if ( c == EOF ) {
	    fprintf(stderr, "EOF in comment");
	    printf("Press Enter to continue...");
	  }
	}
  }
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 169 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{
  return yytext[0];
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 173 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{
  yy_pop_state();
  return yytext[0];
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 178 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
// eat up comments 
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 180 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
// eat up whitespace
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 182 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ yyline++; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 184 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
{ 
  printf("\nParse error line %d near: %s\n", yyline, yytext); 
  printf("Press Enter to continue...");
}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 189 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"
ECHO;
	YY_BREAK
#line 1606 "..\\lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(global):
case YY_STATE_EOF(camera):
case YY_STATE_EOF(triangle):
case YY_STATE_EOF(mesh):
case YY_STATE_EOF(instance):
case YY_STATE_EOF(light):
case YY_STATE_EOF(pointlight):
case YY_STATE_EOF(dirlight):
case YY_STATE_EOF(areaLight):
case YY_STATE_EOF(sphere):
case YY_STATE_EOF(square):
case YY_STATE_EOF(material_phong):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 602 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 602 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 601);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 189 "C:\\Users\\DeadMan\\Dropbox\\Graduate Courses\\ECS 275\\Project v_2\\miro\\lexer.lex"

