
/*  A Bison parser, made from ..\parse.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	REAL	258
#define	PARSE_INT	259
#define	STRING	260
#define	PARSE_TRUE	261
#define	PARSE_FALSE	262
#define	ENABLE	263
#define	DISABLE	264
#define	MATH_COS	265
#define	MATH_SIN	266
#define	MATH_TAN	267
#define	MATH_ACOS	268
#define	MATH_ASIN	269
#define	MATH_ATAN	270
#define	MATH_ATAN2	271
#define	MATH_LN	272
#define	MATH_LOG	273
#define	MATH_EXP	274
#define	MATH_SQRT	275
#define	MATH_E	276
#define	MATH_PI	277
#define	GLOBAL	278
#define	WIDTH	279
#define	HEIGHT	280
#define	BGCOLOR	281
#define	BSPSPLITS	282
#define	SAMPLESX	283
#define	SAMPLESY	284
#define	SHUTTERTIME	285
#define	PATHTRACE	286
#define	PHOTONMAP	287
#define	CAUSTICPHOTONS	288
#define	INDIRECTPHOTONS	289
#define	PHOTONSESTIMATE	290
#define	CAUSTICESTIMATE	291
#define	FINALGATHER	292
#define	CAMERA	293
#define	POS	294
#define	DIR	295
#define	LOOKAT	296
#define	UP	297
#define	FOV	298
#define	APERTURESIZE	299
#define	FOCALLENGTH	300
#define	FOCALPOINT	301
#define	TRIANGLE	302
#define	V1	303
#define	V2	304
#define	V3	305
#define	N1	306
#define	N2	307
#define	N3	308
#define	MESH	309
#define	LOAD	310
#define	GROUP	311
#define	INSTANCE	312
#define	GEOMETRY	313
#define	MATERIAL_PHONG	314
#define	ME	315
#define	MA	316
#define	MD	317
#define	MS	318
#define	MR	319
#define	MT	320
#define	MSP	321
#define	INDEX	322
#define	PUSHMATRIX	323
#define	POPMATRIX	324
#define	ROTATE	325
#define	TRANSLATE	326
#define	SCALE	327
#define	VELOCITY	328
#define	LIGHT	329
#define	POINTLIGHT	330
#define	WATTAGE	331
#define	COLOR	332
#define	DIRLIGHT	333
#define	AREALIGHT	334
#define	INTENSITY	335
#define	RENDERLIGHT	336
#define	SPHERE	337
#define	CENTER	338
#define	RADIUS	339
#define	SQUARE	340
#define	NORMAL	341
#define	SAMPLES	342
#define	NEG	343

#line 1 "..\parse.y"

#ifdef WIN32
#pragma warning(disable:4786)
#endif

#include <stdlib.h>
#include <math.h>
#include <stack>
#include <map>
#include <string>
#include <iostream>
#include "miro.h"
#include "object.h"
#include "bspTree.h"
#include "scene.h"
#include "instance.h"
#include "triangle.h"
#include "triangleMesh.h"
#include "sphere.h"
#include "camera.h"
#include "material.h"
#include "image.h"
#include "console.h"
#include "square.h"
#include "AreaLight.h"
#include "PhotonManager.h"

//#define YYDEBUG 1
#define yyerror(x) Fatal("Parser error on line %d: %s\n", yyline, x); 

extern int yylex();
extern int yyline;
extern FILE *yyin, *yyout;

// variables for adding objects, keeping track of variables
Object* pObj=0;
BSPTree* pBSP=0;
std::map<std::string, Object*> g_objectMap;
Material* pMat=new Material;
char* g = 0;
// add more here

Vector3 __parse_temp_vector;
std::stack<Matrix4x4> g_kMatrixStack;
Vector3 g_Vel;
Light* pLight=0;

Vector3& Vertex3(const float& x, const float& y, const float& z);
Vector3& Vertex3(const Vector3& v);
Vector3& Color3(const float& x, const float& y, const float& z);
void Translate(const float& x, const float& y, const float& z);
void Rotate(const float& angle, float x, float y, float z); // angle is in degrees
void Scale(const float& x, const float& y, const float& z);
Matrix4x4& GetCTM();
void PushMatrix();
void PopMatrix();


#line 62 "..\parse.y"
typedef union
{
    float real;
    int integer;
    char* str;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		464
#define	YYFLAG		-32768
#define	YYNTBASE	100

#define YYTRANSLATE(x) ((unsigned)(x) <= 343 ? yytranslate[x] : 143)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    98,
    99,    91,    90,    97,    89,     2,    92,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    88,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,    94,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    95,     2,    96,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    93
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     4,     9,    14,    16,    18,    22,    24,    25,
    31,    32,    39,    40,    46,    47,    54,    55,    61,    62,
    69,    70,    76,    77,    84,    85,    91,    92,    99,   100,
   108,   116,   124,   132,   140,   148,   149,   157,   161,   162,
   170,   171,   175,   177,   179,   188,   195,   202,   209,   210,
   215,   216,   221,   222,   227,   228,   236,   240,   248,   249,
   257,   265,   266,   270,   274,   278,   279,   282,   283,   288,
   289,   293,   297,   305,   309,   313,   317,   321,   325,   329,
   333,   337,   341,   345,   349,   350,   356,   357,   364,   365,
   374,   375,   384,   385,   394,   395,   400,   401,   410,   411,
   420,   421,   426,   427,   435,   443,   451,   459,   463,   467,
   471,   479,   481,   483,   485,   489,   493,   497,   501,   505,
   509,   513,   517,   521,   525,   529,   533,   537,   541,   545,
   548,   552,   554,   559,   564,   569,   574,   579,   584,   589,
   594,   599,   604,   606,   608,   610,   614,   618,   622,   626,
   629,   633
};

static const short yyrhs[] = {    -1,
   100,   101,     0,    23,    95,   127,    96,     0,    38,    95,
   138,    96,     0,   102,     0,   128,     0,    74,   118,    96,
     0,   117,     0,     0,    47,    95,   103,   113,    96,     0,
     0,    47,     5,    95,   104,   113,    96,     0,     0,    54,
    95,   105,   125,    96,     0,     0,    54,     5,    95,   106,
   125,    96,     0,     0,    82,    95,   107,   114,    96,     0,
     0,    82,     5,    95,   108,   114,    96,     0,     0,    85,
    95,   109,   115,    96,     0,     0,    85,     5,    95,   110,
   115,    96,     0,     0,    57,    95,   111,   116,    96,     0,
     0,    57,     5,    95,   112,   116,    96,     0,     0,    48,
   139,    97,   139,    97,   139,   113,     0,    49,   139,    97,
   139,    97,   139,   113,     0,    50,   139,    97,   139,    97,
   139,   113,     0,    51,   139,    97,   139,    97,   139,   113,
     0,    52,   139,    97,   139,    97,   139,   113,     0,    53,
   139,    97,   139,    97,   139,   113,     0,     0,    83,   139,
    97,   139,    97,   139,   114,     0,    84,   139,   114,     0,
     0,    83,   139,    97,   139,    97,   139,   115,     0,     0,
    58,     5,   114,     0,    68,     0,    69,     0,    70,   139,
    97,   139,    97,   139,    97,   139,     0,    71,   139,    97,
   139,    97,   139,     0,    72,   139,    97,   139,    97,   139,
     0,    73,   139,    97,   139,    97,   139,     0,     0,    75,
    95,   119,   122,     0,     0,    78,    95,   120,   123,     0,
     0,    79,    95,   121,   124,     0,     0,    39,   139,    97,
   139,    97,   139,   122,     0,    76,   139,   122,     0,    77,
   139,    97,   139,    97,   139,   122,     0,     0,    40,   139,
    97,   139,    97,   139,   123,     0,    77,   139,    97,   139,
    97,   139,   123,     0,     0,    80,   139,   124,     0,    87,
   139,   124,     0,    81,   139,   124,     0,     0,    55,     5,
     0,     0,    56,     5,   126,   125,     0,     0,    25,   142,
   127,     0,    24,   142,   127,     0,    26,   139,    97,   139,
    97,   139,   127,     0,    28,   139,   127,     0,    29,   139,
   127,     0,    27,   139,   127,     0,    30,   139,   127,     0,
    31,   139,   127,     0,    32,   139,   127,     0,    33,   139,
   127,     0,    34,   139,   127,     0,    35,   139,   127,     0,
    36,   139,   127,     0,    37,   139,   127,     0,     0,    59,
    95,   129,   130,    96,     0,     0,    60,   139,    97,   139,
    97,   139,     0,     0,    61,   139,    97,   139,    97,   139,
   131,   130,     0,     0,    62,   139,    97,   139,    97,   139,
   132,   130,     0,     0,    63,   139,    97,   139,    97,   139,
   133,   130,     0,     0,    66,   139,   134,   130,     0,     0,
    64,   139,    97,   139,    97,   139,   135,   130,     0,     0,
    65,   139,    97,   139,    97,   139,   136,   130,     0,     0,
    67,   139,   137,   130,     0,     0,    39,   139,    97,   139,
    97,   139,   138,     0,    40,   139,    97,   139,    97,   139,
   138,     0,    41,   139,    97,   139,    97,   139,   138,     0,
    42,   139,    97,   139,    97,   139,   138,     0,    43,   139,
   138,     0,    44,   139,   138,     0,    45,   139,   138,     0,
    46,   139,    97,   139,    97,   139,   138,     0,     3,     0,
   142,     0,   140,     0,   139,    90,   139,     0,   142,    90,
   139,     0,   139,    90,   142,     0,   139,    89,   139,     0,
   142,    89,   139,     0,   139,    89,   142,     0,   139,    91,
   139,     0,   142,    91,   139,     0,   139,    91,   142,     0,
   139,    92,   139,     0,   142,    92,   139,     0,   139,    92,
   142,     0,   139,    94,   139,     0,   142,    94,   139,     0,
   139,    94,   142,     0,    89,   139,     0,    98,   139,    99,
     0,   141,     0,    11,    98,   139,    99,     0,    10,    98,
   139,    99,     0,    12,    98,   139,    99,     0,    14,    98,
   139,    99,     0,    13,    98,   139,    99,     0,    15,    98,
   139,    99,     0,    17,    98,   139,    99,     0,    18,    98,
   139,    99,     0,    19,    98,   139,    99,     0,    20,    98,
   139,    99,     0,    21,     0,    22,     0,     4,     0,   142,
    90,   142,     0,   142,    89,   142,     0,   142,    91,   142,
     0,   142,    92,   142,     0,    89,   142,     0,   142,    94,
   142,     0,    98,   142,    99,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   185,   186,   189,   190,   191,   192,   193,   194,   197,   206,
   213,   225,   237,   244,   251,   262,   274,   281,   288,   296,
   303,   309,   315,   322,   330,   336,   343,   350,   358,   359,
   361,   363,   365,   367,   369,   373,   374,   376,   380,   381,
   384,   385,   395,   396,   398,   400,   402,   404,   408,   409,
   409,   410,   410,   411,   413,   414,   416,   418,   422,   423,
   425,   429,   430,   442,   444,   454,   455,   469,   475,   477,
   478,   480,   482,   484,   486,   488,   490,   492,   499,   506,
   508,   510,   512,   514,   518,   523,   526,   527,   529,   532,
   532,   535,   535,   538,   538,   541,   541,   544,   544,   547,
   547,   550,   552,   553,   555,   557,   559,   561,   563,   565,
   567,   571,   572,   573,   575,   576,   577,   579,   580,   581,
   583,   584,   585,   587,   588,   589,   591,   592,   593,   595,
   596,   597,   600,   601,   602,   603,   604,   605,   606,   607,
   608,   609,   612,   614,   617,   618,   619,   620,   621,   622,
   623,   624
};

static const char * const yytname[] = {   "$","error","$undefined.","REAL","PARSE_INT",
"STRING","PARSE_TRUE","PARSE_FALSE","ENABLE","DISABLE","MATH_COS","MATH_SIN",
"MATH_TAN","MATH_ACOS","MATH_ASIN","MATH_ATAN","MATH_ATAN2","MATH_LN","MATH_LOG",
"MATH_EXP","MATH_SQRT","MATH_E","MATH_PI","GLOBAL","WIDTH","HEIGHT","BGCOLOR",
"BSPSPLITS","SAMPLESX","SAMPLESY","SHUTTERTIME","PATHTRACE","PHOTONMAP","CAUSTICPHOTONS",
"INDIRECTPHOTONS","PHOTONSESTIMATE","CAUSTICESTIMATE","FINALGATHER","CAMERA",
"POS","DIR","LOOKAT","UP","FOV","APERTURESIZE","FOCALLENGTH","FOCALPOINT","TRIANGLE",
"V1","V2","V3","N1","N2","N3","MESH","LOAD","GROUP","INSTANCE","GEOMETRY","MATERIAL_PHONG",
"ME","MA","MD","MS","MR","MT","MSP","INDEX","PUSHMATRIX","POPMATRIX","ROTATE",
"TRANSLATE","SCALE","VELOCITY","LIGHT","POINTLIGHT","WATTAGE","COLOR","DIRLIGHT",
"AREALIGHT","INTENSITY","RENDERLIGHT","SPHERE","CENTER","RADIUS","SQUARE","NORMAL",
"SAMPLES","'='","'-'","'+'","'*'","'/'","NEG","'^'","'{'","'}'","','","'('",
"')'","input","block","objectTypes","@1","@2","@3","@4","@5","@6","@7","@8",
"@9","@10","triangleOptions","sphereOptions","squareOptions","instanceOptions",
"transform","lightTypes","@11","@12","@13","pointLightOptions","dirLightOptions",
"areaLightOptions","meshOptions","@14","globalOptions","materialTypes","@15",
"materialPhongOptions","@16","@17","@18","@19","@20","@21","@22","cameraOptions",
"rExp","fExp","constantExp","iExp",""
};
#endif

static const short yyr1[] = {     0,
   100,   100,   101,   101,   101,   101,   101,   101,   103,   102,
   104,   102,   105,   102,   106,   102,   107,   102,   108,   102,
   109,   102,   110,   102,   111,   102,   112,   102,   113,   113,
   113,   113,   113,   113,   113,   114,   114,   114,   115,   115,
   116,   116,   117,   117,   117,   117,   117,   117,   119,   118,
   120,   118,   121,   118,   122,   122,   122,   122,   123,   123,
   123,   124,   124,   124,   124,   125,   125,   126,   125,   127,
   127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
   127,   127,   127,   127,   129,   128,   130,   130,   131,   130,
   132,   130,   133,   130,   134,   130,   135,   130,   136,   130,
   137,   130,   138,   138,   138,   138,   138,   138,   138,   138,
   138,   139,   139,   139,   139,   139,   139,   139,   139,   139,
   139,   139,   139,   139,   139,   139,   139,   139,   139,   139,
   139,   139,   140,   140,   140,   140,   140,   140,   140,   140,
   140,   140,   141,   141,   142,   142,   142,   142,   142,   142,
   142,   142
};

static const short yyr2[] = {     0,
     0,     2,     4,     4,     1,     1,     3,     1,     0,     5,
     0,     6,     0,     5,     0,     6,     0,     5,     0,     6,
     0,     5,     0,     6,     0,     5,     0,     6,     0,     7,
     7,     7,     7,     7,     7,     0,     7,     3,     0,     7,
     0,     3,     1,     1,     8,     6,     6,     6,     0,     4,
     0,     4,     0,     4,     0,     7,     3,     7,     0,     7,
     7,     0,     3,     3,     3,     0,     2,     0,     4,     0,
     3,     3,     7,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     0,     5,     0,     6,     0,     8,
     0,     8,     0,     8,     0,     4,     0,     8,     0,     8,
     0,     4,     0,     7,     7,     7,     7,     3,     3,     3,
     7,     1,     1,     1,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
     3,     1,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     1,     1,     1,     3,     3,     3,     3,     2,
     3,     3
};

static const short yydefact[] = {     1,
     0,     0,     0,     0,     0,     0,     0,    43,    44,     0,
     0,     0,     0,     0,     0,     0,     2,     5,     8,     6,
    70,   103,     0,     9,     0,    13,     0,    25,    85,   112,
   145,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   143,   144,     0,     0,     0,   114,   132,   113,     0,
     0,     0,     0,     0,     0,     0,     0,    17,     0,    21,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    11,    29,    15,    66,    27,    41,
    87,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   130,   113,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    49,
    51,    53,     7,    19,    36,    23,    39,     0,     0,    70,
    70,     0,    70,    70,    70,    70,    70,    70,    70,    70,
    70,    70,    70,     3,     0,     0,     0,     0,   103,   103,
   103,     0,     4,    29,     0,     0,     0,     0,     0,     0,
     0,    66,     0,     0,     0,    41,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   131,   152,   118,
   113,   115,   113,   121,   113,   124,   113,   127,   113,     0,
   119,   113,   116,   113,   122,   113,   125,   113,   128,   113,
     0,     0,     0,    55,    59,    62,    36,     0,     0,     0,
    39,     0,     0,   150,     0,     0,     0,     0,     0,     0,
    72,    71,     0,    76,    74,    75,    77,    78,    79,    80,
    81,    82,    83,    84,     0,     0,     0,     0,   108,   109,
   110,     0,     0,     0,     0,     0,     0,     0,     0,    10,
     0,    67,    68,    14,     0,    36,    26,     0,     0,     0,
     0,     0,     0,    95,   101,    86,   134,   133,   135,   137,
   136,   138,   139,   140,   141,   142,     0,     0,     0,     0,
     0,     0,     0,    50,     0,     0,    52,     0,     0,     0,
    54,     0,     0,    36,    18,     0,     0,    22,   147,   146,
   148,   149,   151,     0,     0,     0,     0,     0,     0,    12,
     0,     0,     0,     0,     0,     0,    16,    66,    28,    42,
     0,     0,     0,     0,     0,     0,    87,    87,     0,    46,
    47,    48,     0,    55,     0,     0,     0,    62,    62,    62,
    20,     0,    38,    24,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    69,     0,     0,
     0,     0,     0,     0,    96,   102,     0,     0,    57,     0,
     0,     0,    63,    65,    64,     0,     0,    70,   103,   103,
   103,   103,   103,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    45,     0,     0,     0,     0,
     0,     0,    73,   104,   105,   106,   107,   111,    29,    29,
    29,    29,    29,    29,    88,    89,    91,    93,    97,    99,
     0,     0,     0,     0,    36,    39,    30,    31,    32,    33,
    34,    35,    87,    87,    87,    87,    87,    55,    55,    59,
    59,    37,    40,    90,    92,    94,    98,   100,    56,    58,
    60,    61,     0,     0
};

static const short yydefgoto[] = {     1,
    17,    18,    86,   154,    88,   162,   125,   217,   127,   221,
    90,   166,   161,   220,   223,   168,    19,    56,   214,   215,
   216,   294,   297,   301,   165,   328,    75,    20,    91,   177,
   443,   444,   445,   337,   446,   447,   338,    84,    46,    47,
    48,    49
};

static const short yypact[] = {-32768,
   357,   -69,   -67,    20,    24,    38,   -31,-32768,-32768,    27,
    27,    27,    27,   -43,    45,    46,-32768,-32768,-32768,-32768,
   272,  1029,    -1,-32768,    25,-32768,    39,-32768,-32768,-32768,
-32768,    70,    72,    92,    94,   101,   106,   108,   112,   114,
   125,-32768,-32768,    27,    27,   343,-32768,-32768,   248,   475,
   484,   493,    48,   129,   130,    22,   135,-32768,   138,-32768,
    23,    23,    27,    27,    27,    27,    27,    27,    27,    27,
    27,    27,    27,    27,    26,    27,    27,    27,    27,    27,
    27,    27,    27,   113,-32768,  1036,-32768,   -35,-32768,   180,
  1016,    27,    27,    27,    27,    27,    27,    27,    27,    27,
    27,   145,   146,    97,   161,    27,    27,    27,    27,    27,
    27,    27,    27,    27,    27,    27,    27,    27,    27,-32768,
-32768,-32768,-32768,-32768,    -5,-32768,   160,    23,    23,   419,
   419,   502,   433,   433,   433,   433,   433,   433,   433,   433,
   433,   433,   433,-32768,   511,   520,   529,   538,   111,   111,
   111,   547,-32768,  1036,    27,    27,    27,    27,    27,    27,
   152,   -35,   249,   258,   168,   180,   260,   170,    27,    27,
    27,    27,    27,    27,    27,    27,   171,   316,   394,   400,
   406,   427,   439,   445,   451,   457,   463,-32768,-32768,   -17,
    75,   -17,    75,   145,   146,   145,   146,   145,   146,   556,
   -17,    75,   -17,    75,   145,   146,   145,   146,   145,   146,
   565,   574,   583,    37,    40,    55,    -5,    27,    27,   178,
   160,    27,   179,   189,   469,    23,    23,    23,    23,    23,
-32768,-32768,    27,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    27,    27,    27,    27,-32768,-32768,
-32768,    27,   190,   592,   601,   610,   619,   628,   637,-32768,
   194,-32768,-32768,-32768,   220,    -5,-32768,   646,   655,   664,
   673,   682,   691,   412,   412,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,    27,    27,    27,    27,
    27,    27,    27,-32768,    27,    27,-32768,    27,    27,    27,
-32768,   221,   700,   388,-32768,   222,   709,-32768,    91,    91,
   189,   189,   189,   718,   727,   736,   745,   754,   763,-32768,
    27,    27,    27,    27,    27,    27,-32768,   -35,-32768,-32768,
    27,    27,    27,    27,    27,    27,  1016,  1016,   772,   412,
   412,   412,   781,   137,   790,   799,   808,   271,   271,   271,
-32768,    27,-32768,-32768,    27,    27,    27,    27,    27,    27,
    27,   817,   826,   835,   844,   853,   862,-32768,   871,   880,
   889,   898,   907,   916,-32768,-32768,    27,    27,-32768,    27,
    27,    27,-32768,-32768,-32768,   925,   934,   433,   111,   111,
   111,   111,   111,    27,    27,    27,    27,    27,    27,    27,
    27,    27,    27,    27,    27,   412,   943,   952,   961,   970,
    27,    27,-32768,-32768,-32768,-32768,-32768,-32768,   167,   167,
   167,   167,   167,   167,   412,   412,   412,   412,   412,   412,
    27,    27,    27,    27,   388,   285,-32768,-32768,-32768,-32768,
-32768,-32768,  1016,  1016,  1016,  1016,  1016,   137,   137,   155,
   155,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   319,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  -151,  -193,  -215,   162,-32768,-32768,-32768,-32768,
-32768,  -325,  -253,  -211,  -144,-32768,  -126,-32768,-32768,  -315,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -58,   -11,-32768,
-32768,    65
};


#define	YYLAST		1089


static const short yytable[] = {    50,
    51,    52,   253,   231,   232,   306,   234,   235,   236,   237,
   238,   239,   240,   241,   242,   243,   244,   261,   379,   163,
   164,   375,   376,   302,    23,    21,    31,    22,    25,    30,
    31,    53,   102,   104,    54,    55,    32,    33,    34,    35,
    36,    37,    27,    38,    39,    40,    41,    42,    43,    57,
    59,   132,   133,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,    29,   145,   146,   147,   148,   149,   150,
   151,   152,   330,   108,   109,   291,   110,   218,   219,   295,
   178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
   249,   250,   251,    85,   190,   192,   194,   196,   198,   200,
   201,   203,   205,   207,   209,   211,   212,   213,   103,   105,
   353,   128,   292,   293,    24,    44,   296,   123,    26,    87,
   129,   144,   459,   460,    45,   130,   131,   454,   455,   456,
   457,   458,    28,    89,   298,   299,   383,   384,   385,    58,
    60,   300,   120,   254,   255,   256,   257,   258,   259,    76,
    77,    78,    79,    80,    81,    82,    83,   268,   269,   270,
   271,   272,   273,   274,   275,   114,   115,    92,   116,    93,
   191,   193,   195,   197,   199,   291,   202,   204,   206,   208,
   210,   228,   229,   368,   230,   106,   107,   108,   109,    94,
   110,    95,   224,   225,   295,   188,   461,   462,    96,   106,
   107,   108,   109,    97,   110,    98,   303,   304,   153,    99,
   307,   100,   292,   293,   155,   156,   157,   158,   159,   160,
   453,   314,   101,   121,   122,   106,   107,   108,   109,   124,
   110,   296,   126,   315,   316,   317,   318,   167,   110,   116,
   319,   452,   222,   106,   107,   108,   109,   260,   110,   112,
   113,   114,   115,   262,   116,   106,   107,   108,   109,   189,
   110,   413,   263,   264,   266,   267,   276,   437,   438,   439,
   440,   441,   442,   305,   308,   339,   340,   341,   342,   343,
   344,   345,   230,   346,   347,   320,   348,   349,   350,   327,
   309,   310,   311,   312,   313,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,   362,
   363,   364,   365,   366,   367,   329,   351,   354,   464,   369,
   370,   371,   372,   373,   374,     0,     0,   265,     0,     0,
   414,   415,   416,   417,   418,     0,   112,   113,   114,   115,
   386,   116,     0,   387,   388,   389,   390,   391,   392,   393,
   298,   299,     0,     0,     0,     0,   463,   300,     0,   106,
   107,   108,   109,     0,   110,   406,   407,   222,   408,   409,
   410,     0,     0,   106,   107,   108,   109,     0,   110,     2,
     0,     0,   419,   420,   421,   422,   423,   424,   425,   426,
   427,   428,   429,   430,     3,     0,     0,     0,     0,   435,
   436,     0,     0,     4,   106,   107,   108,   109,     0,   110,
     5,     0,     0,     6,   277,     7,     0,     0,     0,   448,
   449,   450,   451,     0,     8,     9,    10,    11,    12,    13,
    14,   106,   107,   108,   109,     0,   110,     0,    15,   111,
     0,    16,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
   218,   219,     0,     0,     0,     0,   106,   107,   108,   109,
     0,   110,   106,   107,   108,   109,     0,   110,   106,   107,
   108,   109,   278,   110,   106,   107,   108,   109,   279,   110,
   106,   107,   108,   109,   280,   110,     0,   226,   227,   228,
   229,     0,   230,     0,     0,   106,   107,   108,   109,     0,
   110,   106,   107,   108,   109,   281,   110,   106,   107,   108,
   109,     0,   110,   106,   107,   108,   109,   282,   110,   106,
   107,   108,   109,   283,   110,   106,   107,   108,   109,   284,
   110,   106,   107,   108,   109,   285,   110,   226,   227,   228,
   229,   286,   230,   106,   107,   108,   109,   189,   110,     0,
     0,   117,   106,   107,   108,   109,     0,   110,     0,     0,
   118,   106,   107,   108,   109,     0,   110,     0,     0,   119,
   106,   107,   108,   109,     0,   110,     0,     0,   233,   106,
   107,   108,   109,     0,   110,     0,     0,   245,   106,   107,
   108,   109,     0,   110,     0,     0,   246,   106,   107,   108,
   109,     0,   110,     0,     0,   247,   106,   107,   108,   109,
     0,   110,     0,     0,   248,   106,   107,   108,   109,     0,
   110,     0,     0,   252,   106,   107,   108,   109,     0,   110,
     0,     0,   287,   106,   107,   108,   109,     0,   110,     0,
     0,   288,   106,   107,   108,   109,     0,   110,     0,     0,
   289,   106,   107,   108,   109,     0,   110,     0,     0,   290,
   106,   107,   108,   109,     0,   110,     0,     0,   321,   106,
   107,   108,   109,     0,   110,     0,     0,   322,   106,   107,
   108,   109,     0,   110,     0,     0,   323,   106,   107,   108,
   109,     0,   110,     0,     0,   324,   106,   107,   108,   109,
     0,   110,     0,     0,   325,   106,   107,   108,   109,     0,
   110,     0,     0,   326,   106,   107,   108,   109,     0,   110,
     0,     0,   331,   106,   107,   108,   109,     0,   110,     0,
     0,   332,   106,   107,   108,   109,     0,   110,     0,     0,
   333,   106,   107,   108,   109,     0,   110,     0,     0,   334,
   106,   107,   108,   109,     0,   110,     0,     0,   335,   106,
   107,   108,   109,     0,   110,     0,     0,   336,   106,   107,
   108,   109,     0,   110,     0,     0,   352,   106,   107,   108,
   109,     0,   110,     0,     0,   355,   106,   107,   108,   109,
     0,   110,     0,     0,   356,   106,   107,   108,   109,     0,
   110,     0,     0,   357,   106,   107,   108,   109,     0,   110,
     0,     0,   358,   106,   107,   108,   109,     0,   110,     0,
     0,   359,   106,   107,   108,   109,     0,   110,     0,     0,
   360,   106,   107,   108,   109,     0,   110,     0,     0,   361,
   106,   107,   108,   109,     0,   110,     0,     0,   377,   106,
   107,   108,   109,     0,   110,     0,     0,   378,   106,   107,
   108,   109,     0,   110,     0,     0,   380,   106,   107,   108,
   109,     0,   110,     0,     0,   381,   106,   107,   108,   109,
     0,   110,     0,     0,   382,   106,   107,   108,   109,     0,
   110,     0,     0,   394,   106,   107,   108,   109,     0,   110,
     0,     0,   395,   106,   107,   108,   109,     0,   110,     0,
     0,   396,   106,   107,   108,   109,     0,   110,     0,     0,
   397,   106,   107,   108,   109,     0,   110,     0,     0,   398,
   106,   107,   108,   109,     0,   110,     0,     0,   399,   106,
   107,   108,   109,     0,   110,     0,     0,   400,   106,   107,
   108,   109,     0,   110,     0,     0,   401,   106,   107,   108,
   109,     0,   110,     0,     0,   402,   106,   107,   108,   109,
     0,   110,     0,     0,   403,   106,   107,   108,   109,     0,
   110,     0,     0,   404,   106,   107,   108,   109,     0,   110,
     0,     0,   405,   106,   107,   108,   109,     0,   110,     0,
     0,   411,   106,   107,   108,   109,     0,   110,     0,     0,
   412,   106,   107,   108,   109,     0,   110,     0,     0,   431,
   106,   107,   108,   109,     0,   110,     0,     0,   432,   106,
   107,   108,   109,     0,   110,     0,     0,   433,   106,   107,
   108,   109,     0,   110,     0,     0,   434,    76,    77,    78,
    79,    80,    81,    82,    83,   169,   170,   171,   172,   173,
   174,   175,   176,   155,   156,   157,   158,   159,   160
};

static const short yycheck[] = {    11,
    12,    13,   154,   130,   131,   221,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   162,   344,    55,
    56,   337,   338,   217,     5,    95,     4,    95,     5,     3,
     4,    75,    44,    45,    78,    79,    10,    11,    12,    13,
    14,    15,     5,    17,    18,    19,    20,    21,    22,     5,
     5,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    95,    76,    77,    78,    79,    80,    81,
    82,    83,   266,    91,    92,    39,    94,    83,    84,    40,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   149,   150,   151,    95,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,    44,    45,
   304,    89,    76,    77,    95,    89,    77,    96,    95,    95,
    98,    96,   448,   449,    98,    61,    62,   443,   444,   445,
   446,   447,    95,    95,    80,    81,   348,   349,   350,    95,
    95,    87,    95,   155,   156,   157,   158,   159,   160,    39,
    40,    41,    42,    43,    44,    45,    46,   169,   170,   171,
   172,   173,   174,   175,   176,    91,    92,    98,    94,    98,
   106,   107,   108,   109,   110,    39,   112,   113,   114,   115,
   116,    91,    92,   328,    94,    89,    90,    91,    92,    98,
    94,    98,   128,   129,    40,    99,   450,   451,    98,    89,
    90,    91,    92,    98,    94,    98,   218,   219,    96,    98,
   222,    98,    76,    77,    48,    49,    50,    51,    52,    53,
   436,   233,    98,    95,    95,    89,    90,    91,    92,    95,
    94,    77,    95,   245,   246,   247,   248,    58,    94,    94,
   252,   435,    83,    89,    90,    91,    92,    96,    94,    89,
    90,    91,    92,     5,    94,    89,    90,    91,    92,    99,
    94,   388,     5,    96,     5,    96,    96,   419,   420,   421,
   422,   423,   424,    96,    96,   287,   288,   289,   290,   291,
   292,   293,    94,   295,   296,    96,   298,   299,   300,    96,
   226,   227,   228,   229,   230,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,   321,
   322,   323,   324,   325,   326,    96,    96,    96,     0,   331,
   332,   333,   334,   335,   336,    -1,    -1,   166,    -1,    -1,
   389,   390,   391,   392,   393,    -1,    89,    90,    91,    92,
   352,    94,    -1,   355,   356,   357,   358,   359,   360,   361,
    80,    81,    -1,    -1,    -1,    -1,     0,    87,    -1,    89,
    90,    91,    92,    -1,    94,   377,   378,    83,   380,   381,
   382,    -1,    -1,    89,    90,    91,    92,    -1,    94,    23,
    -1,    -1,   394,   395,   396,   397,   398,   399,   400,   401,
   402,   403,   404,   405,    38,    -1,    -1,    -1,    -1,   411,
   412,    -1,    -1,    47,    89,    90,    91,    92,    -1,    94,
    54,    -1,    -1,    57,    99,    59,    -1,    -1,    -1,   431,
   432,   433,   434,    -1,    68,    69,    70,    71,    72,    73,
    74,    89,    90,    91,    92,    -1,    94,    -1,    82,    97,
    -1,    85,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    83,    84,    -1,    -1,    -1,    -1,    89,    90,    91,    92,
    -1,    94,    89,    90,    91,    92,    -1,    94,    89,    90,
    91,    92,    99,    94,    89,    90,    91,    92,    99,    94,
    89,    90,    91,    92,    99,    94,    -1,    89,    90,    91,
    92,    -1,    94,    -1,    -1,    89,    90,    91,    92,    -1,
    94,    89,    90,    91,    92,    99,    94,    89,    90,    91,
    92,    -1,    94,    89,    90,    91,    92,    99,    94,    89,
    90,    91,    92,    99,    94,    89,    90,    91,    92,    99,
    94,    89,    90,    91,    92,    99,    94,    89,    90,    91,
    92,    99,    94,    89,    90,    91,    92,    99,    94,    -1,
    -1,    97,    89,    90,    91,    92,    -1,    94,    -1,    -1,
    97,    89,    90,    91,    92,    -1,    94,    -1,    -1,    97,
    89,    90,    91,    92,    -1,    94,    -1,    -1,    97,    89,
    90,    91,    92,    -1,    94,    -1,    -1,    97,    89,    90,
    91,    92,    -1,    94,    -1,    -1,    97,    89,    90,    91,
    92,    -1,    94,    -1,    -1,    97,    89,    90,    91,    92,
    -1,    94,    -1,    -1,    97,    89,    90,    91,    92,    -1,
    94,    -1,    -1,    97,    89,    90,    91,    92,    -1,    94,
    -1,    -1,    97,    89,    90,    91,    92,    -1,    94,    -1,
    -1,    97,    89,    90,    91,    92,    -1,    94,    -1,    -1,
    97,    89,    90,    91,    92,    -1,    94,    -1,    -1,    97,
    89,    90,    91,    92,    -1,    94,    -1,    -1,    97,    89,
    90,    91,    92,    -1,    94,    -1,    -1,    97,    89,    90,
    91,    92,    -1,    94,    -1,    -1,    97,    89,    90,    91,
    92,    -1,    94,    -1,    -1,    97,    89,    90,    91,    92,
    -1,    94,    -1,    -1,    97,    89,    90,    91,    92,    -1,
    94,    -1,    -1,    97,    89,    90,    91,    92,    -1,    94,
    -1,    -1,    97,    89,    90,    91,    92,    -1,    94,    -1,
    -1,    97,    89,    90,    91,    92,    -1,    94,    -1,    -1,
    97,    89,    90,    91,    92,    -1,    94,    -1,    -1,    97,
    89,    90,    91,    92,    -1,    94,    -1,    -1,    97,    89,
    90,    91,    92,    -1,    94,    -1,    -1,    97,    89,    90,
    91,    92,    -1,    94,    -1,    -1,    97,    89,    90,    91,
    92,    -1,    94,    -1,    -1,    97,    89,    90,    91,    92,
    -1,    94,    -1,    -1,    97,    89,    90,    91,    92,    -1,
    94,    -1,    -1,    97,    89,    90,    91,    92,    -1,    94,
    -1,    -1,    97,    89,    90,    91,    92,    -1,    94,    -1,
    -1,    97,    89,    90,    91,    92,    -1,    94,    -1,    -1,
    97,    89,    90,    91,    92,    -1,    94,    -1,    -1,    97,
    89,    90,    91,    92,    -1,    94,    -1,    -1,    97,    89,
    90,    91,    92,    -1,    94,    -1,    -1,    97,    89,    90,
    91,    92,    -1,    94,    -1,    -1,    97,    89,    90,    91,
    92,    -1,    94,    -1,    -1,    97,    89,    90,    91,    92,
    -1,    94,    -1,    -1,    97,    89,    90,    91,    92,    -1,
    94,    -1,    -1,    97,    89,    90,    91,    92,    -1,    94,
    -1,    -1,    97,    89,    90,    91,    92,    -1,    94,    -1,
    -1,    97,    89,    90,    91,    92,    -1,    94,    -1,    -1,
    97,    89,    90,    91,    92,    -1,    94,    -1,    -1,    97,
    89,    90,    91,    92,    -1,    94,    -1,    -1,    97,    89,
    90,    91,    92,    -1,    94,    -1,    -1,    97,    89,    90,
    91,    92,    -1,    94,    -1,    -1,    97,    89,    90,    91,
    92,    -1,    94,    -1,    -1,    97,    89,    90,    91,    92,
    -1,    94,    -1,    -1,    97,    89,    90,    91,    92,    -1,
    94,    -1,    -1,    97,    89,    90,    91,    92,    -1,    94,
    -1,    -1,    97,    89,    90,    91,    92,    -1,    94,    -1,
    -1,    97,    89,    90,    91,    92,    -1,    94,    -1,    -1,
    97,    89,    90,    91,    92,    -1,    94,    -1,    -1,    97,
    89,    90,    91,    92,    -1,    94,    -1,    -1,    97,    89,
    90,    91,    92,    -1,    94,    -1,    -1,    97,    89,    90,
    91,    92,    -1,    94,    -1,    -1,    97,    39,    40,    41,
    42,    43,    44,    45,    46,    60,    61,    62,    63,    64,
    65,    66,    67,    48,    49,    50,    51,    52,    53
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif
extern void yyprint(FILE*, int, YYSTYPE);

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 7:
#line 193 "..\parse.y"
{ g_pScene->AddLight(pLight); pLight = 0; ;
    break;}
case 9:
#line 199 "..\parse.y"
{
                pObj = new TriangleMesh;
                pObj->SetMaterial (pMat);
                pObj->SetVelocity(g_Vel);
                pObj->SetTransformation(GetCTM());
                ((TriangleMesh*)pObj)->CreateSingleTriangle();
            ;
    break;}
case 10:
#line 207 "..\parse.y"
{
                if (pObj)
                    g_pScene->AddObject(pObj);
                pObj = 0;
            ;
    break;}
case 11:
#line 214 "..\parse.y"
{
                pBSP = new BSPTree;
                pBSP->SetMaterial (pMat);
                g_objectMap[yyvsp[-1].str] = pBSP;

                pObj = new TriangleMesh;
                pObj->SetMaterial (pMat);
                pObj->SetVelocity(g_Vel);
                pObj->SetTransformation(GetCTM());
                ((TriangleMesh*)pObj)->CreateSingleTriangle();
            ;
    break;}
case 12:
#line 226 "..\parse.y"
{
                if (pObj && pBSP)
                {
                    pBSP->AddObject (pObj);
                    g_pScene->AddObject(pBSP);
                }
                pObj = 0;
                pBSP = 0;
            ;
    break;}
case 13:
#line 238 "..\parse.y"
{
                pObj = new TriangleMesh;
                pObj->SetMaterial (pMat);
                pObj->SetVelocity(g_Vel);
                pObj->SetTransformation(GetCTM());
            ;
    break;}
case 14:
#line 245 "..\parse.y"
{
                if (pObj)
                    g_pScene->AddObject(pObj);
                pObj = 0;
            ;
    break;}
case 15:
#line 252 "..\parse.y"
{
                pBSP = new BSPTree;
                pBSP->SetMaterial (pMat);
                g_objectMap[yyvsp[-1].str] = pBSP;

                pObj = new TriangleMesh;
                pObj->SetMaterial (pMat);
                pObj->SetVelocity(g_Vel);
                pObj->SetTransformation(GetCTM());
            ;
    break;}
case 16:
#line 263 "..\parse.y"
{
                if (pObj && pBSP)
                {
                    pBSP->AddObject (pObj);
                    g_pScene->AddObject(pBSP);
                }
                pObj = 0;
                pBSP = 0;
            ;
    break;}
case 17:
#line 275 "..\parse.y"
{
                pObj = new Sphere;
                pObj->SetMaterial (pMat);
                pObj->SetVelocity(g_Vel);
                pObj->SetTransformation(GetCTM());
            ;
    break;}
case 18:
#line 282 "..\parse.y"
{
                if (pObj)
                    g_pScene->AddObject(pObj);
                pObj = 0;
            ;
    break;}
case 19:
#line 289 "..\parse.y"
{
                pObj = new Sphere;
                pObj->SetMaterial (pMat);
                pObj->SetVelocity(g_Vel);
                pObj->SetTransformation(GetCTM());
                g_objectMap[yyvsp[-1].str] = pObj;
            ;
    break;}
case 20:
#line 297 "..\parse.y"
{
                if (pObj)
                    g_pScene->AddObject(pObj);
                pObj = 0;
            ;
    break;}
case 21:
#line 304 "..\parse.y"
{
                pObj = new Square;
                pObj->SetMaterial (pMat);
                pObj->SetVelocity(g_Vel);
                pObj->SetTransformation(GetCTM());
            ;
    break;}
case 22:
#line 310 "..\parse.y"
{
                if (pObj)
                    g_pScene->AddObject(pObj);
                pObj = 0;
            ;
    break;}
case 23:
#line 316 "..\parse.y"
{
                pObj = new Square;
                pObj->SetMaterial (pMat);
                pObj->SetVelocity(g_Vel);
                pObj->SetTransformation(GetCTM());
                g_objectMap[yyvsp[-1].str] = pObj;
            ;
    break;}
case 24:
#line 323 "..\parse.y"
{
                if (pObj)
                    g_pScene->AddObject(pObj);
                pObj = 0;
            ;
    break;}
case 25:
#line 331 "..\parse.y"
{
                pObj = new Instance;
                pObj->SetMaterial (pMat);
                pObj->SetVelocity(g_Vel);
            ;
    break;}
case 26:
#line 337 "..\parse.y"
{
                if (pObj)
                    g_pScene->AddObject(pObj);
                pObj = 0;
            ;
    break;}
case 27:
#line 344 "..\parse.y"
{
                pObj = new Instance;
                pObj->SetMaterial (pMat);
                pObj->SetVelocity(g_Vel);
                g_objectMap[yyvsp[-1].str] = pObj;
            ;
    break;}
case 28:
#line 351 "..\parse.y"
{
                if (pObj)
                    g_pScene->AddObject(pObj);
                pObj = 0;
            ;
    break;}
case 30:
#line 360 "..\parse.y"
{((TriangleMesh*)pObj)->SetV1(Vertex3(yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real));;
    break;}
case 31:
#line 362 "..\parse.y"
{((TriangleMesh*)pObj)->SetV2(Vertex3(yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real));;
    break;}
case 32:
#line 364 "..\parse.y"
{((TriangleMesh*)pObj)->SetV3(Vertex3(yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real));;
    break;}
case 33:
#line 366 "..\parse.y"
{((TriangleMesh*)pObj)->SetN1(Vertex3(yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real));;
    break;}
case 34:
#line 368 "..\parse.y"
{((TriangleMesh*)pObj)->SetN2(Vertex3(yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real));;
    break;}
case 35:
#line 370 "..\parse.y"
{((TriangleMesh*)pObj)->SetN3(Vertex3(yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real));;
    break;}
case 37:
#line 375 "..\parse.y"
{((Sphere*)pObj)->SetCenter(Vector3(yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real));;
    break;}
case 38:
#line 377 "..\parse.y"
{((Sphere*)pObj)->SetRadius(yyvsp[-1].real);;
    break;}
case 40:
#line 382 "..\parse.y"
{ ( (Square*) pObj)->SetCenter(Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real));;
    break;}
case 42:
#line 386 "..\parse.y"
{
                std::map<std::string, Object*>::const_iterator it = g_objectMap.find (yyvsp[-1].str);
                if (it != g_objectMap.end ())
                {
                    ((Instance*)pObj)->SetGeometry(it->second, GetCTM());
                }
            ;
    break;}
case 43:
#line 395 "..\parse.y"
{ PushMatrix(); ;
    break;}
case 44:
#line 397 "..\parse.y"
{PopMatrix();;
    break;}
case 45:
#line 399 "..\parse.y"
{Rotate(yyvsp[-6].real, yyvsp[-4].real, yyvsp[-2].real, yyvsp[0].real);;
    break;}
case 46:
#line 401 "..\parse.y"
{Translate(yyvsp[-4].real, yyvsp[-2].real, yyvsp[0].real);;
    break;}
case 47:
#line 403 "..\parse.y"
{Scale(yyvsp[-4].real, yyvsp[-2].real, yyvsp[0].real);;
    break;}
case 48:
#line 405 "..\parse.y"
{ g_Vel = Vector3(yyvsp[-4].real,yyvsp[-2].real,yyvsp[0].real); ;
    break;}
case 49:
#line 408 "..\parse.y"
{pLight = new PointLight;;
    break;}
case 51:
#line 409 "..\parse.y"
{pLight = new DirectionalLight; ;
    break;}
case 53:
#line 410 "..\parse.y"
{ pLight = new AreaLight; ;
    break;}
case 56:
#line 415 "..\parse.y"
{ ((PointLight*)pLight)->SetPosition(Vertex3(yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real));;
    break;}
case 57:
#line 417 "..\parse.y"
{ ((PointLight*)pLight)->SetWattage(yyvsp[-1].real);;
    break;}
case 58:
#line 419 "..\parse.y"
{ ((PointLight*)pLight)->SetColor(Vector3(yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real));;
    break;}
case 60:
#line 424 "..\parse.y"
{ ((DirectionalLight*)pLight)->SetDirection(Vector3(yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real)); ;
    break;}
case 61:
#line 426 "..\parse.y"
{ ((DirectionalLight*)pLight)->SetColor(Color3(yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real)); ;
    break;}
case 63:
#line 431 "..\parse.y"
{ 
                ((AreaLight*)pLight)->SetIntensity(yyvsp[-1].real);
                
                pObj = new Square;
                pObj->SetMaterial (pMat);
                pObj->SetVelocity(g_Vel);
                pObj->SetTransformation(GetCTM());
                
                //g_pScene->AddObject(pObj);
                ((AreaLight*)pLight)->SetObject((Square*)pObj);
            ;
    break;}
case 64:
#line 443 "..\parse.y"
{ pLight->SetSamples(yyvsp[-1].real);;
    break;}
case 65:
#line 445 "..\parse.y"
{
                if (yyvsp[-1].real==0)
                    ((AreaLight*)pLight)->RenderGeometry(false);
                else 
                    ((AreaLight*)pLight)->RenderGeometry(true);
            ;
    break;}
case 67:
#line 456 "..\parse.y"
{
                yyvsp[0].str[strlen(yyvsp[0].str)-1]=0;
                char* s = &yyvsp[0].str[1];
                if (!g){
                    if (!((TriangleMesh*)pObj)->Load(s))
                        pObj = 0;
                }else{
                    if (!((TriangleMesh*)pObj)->Load(s,g))
                        pObj = 0;
                }
                g=0;
                delete [] yyvsp[0].str;
            ;
    break;}
case 68:
#line 470 "..\parse.y"
{
                yyvsp[0].str[strlen(yyvsp[0].str)-1]=0;
                char* s = &yyvsp[0].str[1];
                g = s;
            ;
    break;}
case 71:
#line 479 "..\parse.y"
{ g_pImage->Resize(g_pImage->Width(), yyvsp[-1].integer); ;
    break;}
case 72:
#line 481 "..\parse.y"
{ g_pImage->Resize(yyvsp[-1].integer, g_pImage->Height()); ;
    break;}
case 73:
#line 483 "..\parse.y"
{ g_pCamera->SetBGColor(Vector3(yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real)); ;
    break;}
case 74:
#line 485 "..\parse.y"
{ g_pScene->SetSamplesX(yyvsp[-1].real);;
    break;}
case 75:
#line 487 "..\parse.y"
{g_pScene->SetSamplesY(yyvsp[-1].real);;
    break;}
case 76:
#line 489 "..\parse.y"
{BSPTree::setSplitChecks(yyvsp[-1].real);;
    break;}
case 77:
#line 491 "..\parse.y"
{ g_pScene->SetShutterTime(yyvsp[-1].real);;
    break;}
case 78:
#line 493 "..\parse.y"
{
                if (yyvsp[-1].real==0)
                    g_pScene->SetPathTrace(false);
                else
                    g_pScene->SetPathTrace(true);
            ;
    break;}
case 79:
#line 500 "..\parse.y"
{
                if (yyvsp[-1].real==0)
                    g_pScene->EnablePhotonMapping(false);
                else
                    g_pScene->EnablePhotonMapping(true);
            ;
    break;}
case 80:
#line 507 "..\parse.y"
{ g_pScene->getPhotonManager()->setNoCausticPhotons(yyvsp[-1].real);;
    break;}
case 81:
#line 509 "..\parse.y"
{ g_pScene->getPhotonManager()->setNoIndirectPhotons(yyvsp[-1].real);;
    break;}
case 82:
#line 511 "..\parse.y"
{ g_pScene->getPhotonManager()->setNoPhotonsInEstimate(yyvsp[-1].real);;
    break;}
case 83:
#line 513 "..\parse.y"
{ g_pScene->getPhotonManager()->setNoPhotonsInCausticEstimate(yyvsp[-1].real);;
    break;}
case 84:
#line 515 "..\parse.y"
{ g_pScene->getPhotonManager()->setFinalGatherRays(yyvsp[-1].real);;
    break;}
case 85:
#line 520 "..\parse.y"
{
            pMat = new PhongMaterial;
          ;
    break;}
case 88:
#line 528 "..\parse.y"
{ ( (PhongMaterial*) pMat)->SetEmissive(Color3(yyvsp[-4].real,yyvsp[-2].real,yyvsp[0].real));;
    break;}
case 89:
#line 530 "..\parse.y"
{((PhongMaterial*)pMat)->SetAmbient(Color3(yyvsp[-4].real,yyvsp[-2].real,yyvsp[0].real));;
    break;}
case 91:
#line 533 "..\parse.y"
{((PhongMaterial*)pMat)->SetDiffuse(Color3(yyvsp[-4].real,yyvsp[-2].real,yyvsp[0].real));;
    break;}
case 93:
#line 536 "..\parse.y"
{((PhongMaterial*)pMat)->SetSpecular(Color3(yyvsp[-4].real,yyvsp[-2].real,yyvsp[0].real));;
    break;}
case 95:
#line 539 "..\parse.y"
{((PhongMaterial*)pMat)->SetMetalness(yyvsp[0].real);;
    break;}
case 97:
#line 542 "..\parse.y"
{((PhongMaterial*)pMat)->SetReflectence(Color3(yyvsp[-4].real,yyvsp[-2].real,yyvsp[0].real));;
    break;}
case 99:
#line 545 "..\parse.y"
{((PhongMaterial*)pMat)->SetTransmittance(Color3(yyvsp[-4].real,yyvsp[-2].real,yyvsp[0].real));;
    break;}
case 101:
#line 548 "..\parse.y"
{ ((PhongMaterial*)pMat)->SetIndex(yyvsp[0].real);;
    break;}
case 104:
#line 554 "..\parse.y"
{g_pCamera->SetEye(Vector3(yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real));;
    break;}
case 105:
#line 556 "..\parse.y"
{g_pCamera->SetViewDir(Vector3(yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real));;
    break;}
case 106:
#line 558 "..\parse.y"
{g_pCamera->SetLookAt(Vector3(yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real));;
    break;}
case 107:
#line 560 "..\parse.y"
{g_pCamera->SetUp(Vector3(yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real));;
    break;}
case 108:
#line 562 "..\parse.y"
{g_pCamera->SetFOV(yyvsp[-1].real);;
    break;}
case 109:
#line 564 "..\parse.y"
{ g_pCamera->SetApertureSize(yyvsp[-1].real);;
    break;}
case 110:
#line 566 "..\parse.y"
{ g_pCamera->SetFocalLength(yyvsp[-1].real);;
    break;}
case 111:
#line 568 "..\parse.y"
{ g_pCamera->SetFocalPoint(Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real));;
    break;}
case 112:
#line 571 "..\parse.y"
{ yyval.real = yyvsp[0].real;             ;
    break;}
case 113:
#line 572 "..\parse.y"
{ yyval.real = yyvsp[0].integer;             ;
    break;}
case 114:
#line 573 "..\parse.y"
{ yyval.real = yyvsp[0].real;             ;
    break;}
case 115:
#line 575 "..\parse.y"
{ yyval.real = yyvsp[-2].real + yyvsp[0].real;        ;
    break;}
case 116:
#line 576 "..\parse.y"
{ yyval.real = yyvsp[-2].integer + yyvsp[0].real;        ;
    break;}
case 117:
#line 577 "..\parse.y"
{ yyval.real = yyvsp[-2].real + yyvsp[0].integer;        ;
    break;}
case 118:
#line 579 "..\parse.y"
{ yyval.real = yyvsp[-2].real - yyvsp[0].real;        ;
    break;}
case 119:
#line 580 "..\parse.y"
{ yyval.real = yyvsp[-2].integer - yyvsp[0].real;        ;
    break;}
case 120:
#line 581 "..\parse.y"
{ yyval.real = yyvsp[-2].real - yyvsp[0].integer;        ;
    break;}
case 121:
#line 583 "..\parse.y"
{ yyval.real = yyvsp[-2].real * yyvsp[0].real;        ;
    break;}
case 122:
#line 584 "..\parse.y"
{ yyval.real = yyvsp[-2].integer * yyvsp[0].real;        ;
    break;}
case 123:
#line 585 "..\parse.y"
{ yyval.real = yyvsp[-2].real * yyvsp[0].integer;        ;
    break;}
case 124:
#line 587 "..\parse.y"
{ yyval.real = yyvsp[-2].real / yyvsp[0].real;        ;
    break;}
case 125:
#line 588 "..\parse.y"
{ yyval.real = yyvsp[-2].integer / yyvsp[0].real;        ;
    break;}
case 126:
#line 589 "..\parse.y"
{ yyval.real = yyvsp[-2].real / yyvsp[0].integer;        ;
    break;}
case 127:
#line 591 "..\parse.y"
{ yyval.real = pow (float (yyvsp[-2].real), float (yyvsp[0].real));   ;
    break;}
case 128:
#line 592 "..\parse.y"
{ yyval.real = pow (float (yyvsp[-2].integer), float (yyvsp[0].real));   ;
    break;}
case 129:
#line 593 "..\parse.y"
{ yyval.real = pow (float (yyvsp[-2].real), float (yyvsp[0].integer));   ;
    break;}
case 130:
#line 595 "..\parse.y"
{ yyval.real = -yyvsp[0].real;            ;
    break;}
case 131:
#line 596 "..\parse.y"
{ yyval.real = yyvsp[-1].real;             ;
    break;}
case 133:
#line 600 "..\parse.y"
{yyval.real = sin(yyvsp[-1].real); ;
    break;}
case 134:
#line 601 "..\parse.y"
{yyval.real = cos(yyvsp[-1].real); ;
    break;}
case 135:
#line 602 "..\parse.y"
{yyval.real = tan(yyvsp[-1].real); ;
    break;}
case 136:
#line 603 "..\parse.y"
{yyval.real = asin(yyvsp[-1].real); ;
    break;}
case 137:
#line 604 "..\parse.y"
{yyval.real = acos(yyvsp[-1].real); ;
    break;}
case 138:
#line 605 "..\parse.y"
{yyval.real = atan(yyvsp[-1].real); ;
    break;}
case 139:
#line 606 "..\parse.y"
{yyval.real = log(yyvsp[-1].real); ;
    break;}
case 140:
#line 607 "..\parse.y"
{yyval.real = log10(yyvsp[-1].real); ;
    break;}
case 141:
#line 608 "..\parse.y"
{yyval.real = exp(yyvsp[-1].real); ;
    break;}
case 142:
#line 609 "..\parse.y"
{yyval.real = sqrt(yyvsp[-1].real); ;
    break;}
case 143:
#line 613 "..\parse.y"
{ yyval.real = 2.718281828459; ;
    break;}
case 144:
#line 614 "..\parse.y"
{ yyval.real = PI; ;
    break;}
case 145:
#line 617 "..\parse.y"
{ yyval.integer = yyvsp[0].integer;                         ;
    break;}
case 146:
#line 618 "..\parse.y"
{ yyval.integer = yyvsp[-2].integer + yyvsp[0].integer;                    ;
    break;}
case 147:
#line 619 "..\parse.y"
{ yyval.integer = yyvsp[-2].integer - yyvsp[0].integer;                    ;
    break;}
case 148:
#line 620 "..\parse.y"
{ yyval.integer = yyvsp[-2].integer * yyvsp[0].integer;                    ;
    break;}
case 149:
#line 621 "..\parse.y"
{ yyval.integer = yyvsp[-2].integer / yyvsp[0].integer;                    ;
    break;}
case 150:
#line 622 "..\parse.y"
{ yyval.integer = -yyvsp[0].integer;                        ;
    break;}
case 151:
#line 623 "..\parse.y"
{ yyval.integer = (int)pow ( (double)yyvsp[-2].integer, yyvsp[0].integer);          ;
    break;}
case 152:
#line 624 "..\parse.y"
{ yyval.integer = yyvsp[-1].integer;                         ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 628 "..\parse.y"

//Additional C code


Matrix4x4& GetCTM()
{
    return g_kMatrixStack.top();
}

void PushMatrix()
{
    g_kMatrixStack.push(g_kMatrixStack.top());
}

void PopMatrix()
{
    g_Vel = Vector3(0,0,0);
    if(g_kMatrixStack.size() == 1)
    {
        Warning("Matrix stack empty!  Too many pops!\n");
    }
    else
        g_kMatrixStack.pop();
}

void Translate(const float& x, const float& y, const float& z)
{
    Matrix4x4 m;
    m.SetIdentity();
    m.SetColumn4(Vector4(x, y, z, 1));

    Matrix4x4& ctm = GetCTM();
    ctm *= m;
}

void Scale(const float& x, const float& y, const float& z)
{
    Matrix4x4 m;
    m.SetIdentity();
    m.m11 = x;
    m.m22 = y;
    m.m33 = z;

    Matrix4x4& ctm = GetCTM();
    ctm *= m;
}

void Rotate(const float& angle, float x, float y, float z) // angle is in degrees
{

    float rad = angle*(PI/180.);

    float x2 = x*x;
    float y2 = y*y;
    float z2 = z*z;
    float c = cos(rad);
    float cinv = 1-c;
    float s = sin(rad);
    float xy = x*y;
    float xz = x*z;
    float yz = y*z;
    float xs = x*s;
    float ys = y*s;
    float zs = z*s;
    float xzcinv = xz*cinv;
    float xycinv = xy*cinv;
    float yzcinv = yz*cinv;

    Matrix4x4 m;
    m.SetIdentity();
    m.Set(x2 + c*(1-x2), xy*cinv+zs, xzcinv - ys, 0,
          xycinv - zs, y2 + c*(1-y2), yzcinv + xs, 0,
          xzcinv + ys, yzcinv - xs, z2 + c*(1-z2), 0,
          0, 0, 0, 1);

    g_kMatrixStack.top() *= m;
}

Vector3& Vertex3(const Vector3& v)
{
    __parse_temp_vector = v;
    __parse_temp_vector = g_kMatrixStack.top()*__parse_temp_vector; // do transformation

    return __parse_temp_vector;
}

Vector3& Vertex3(const float& x, const float& y, const float& z)
{
    __parse_temp_vector.Set(x, y, z);
    __parse_temp_vector = g_kMatrixStack.top()*__parse_temp_vector; // do transformation

    return __parse_temp_vector;
}

Vector3& Color3(const float& x, const float& y, const float& z)
{
    __parse_temp_vector.Set(x,y,z);
    
    return __parse_temp_vector;
}

void ParseFile(FILE* fp)
{
    g_Vel = Vector3(0,0,0);
    Matrix4x4 m;
    m.SetIdentity();
    g_kMatrixStack.push(m);

    yyin = fp;
    //yydebug = 1;
    yyparse();
    if (g_kMatrixStack.size() > 1)
        Warning("There were more matrix pushes than pops!\n");
}
