#line 2 "../lexer.cpp"

#line 4 "../lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 85
#define YY_END_OF_BUFFER 86
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[499] =
    {   0,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   86,   84,   82,   83,
       79,   84,   81,   79,   76,   79,   75,   84,   84,   84,
       84,   14,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   80,   85,   82,   79,   85,   81,   79,   76,   79,
       75,   85,   85,   85,   85,   85,   14,   85,   85,   85,
       85,   85,   85,   80,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,

       85,   82,   79,    0,   81,   79,   76,    0,   78,   76,
       75,    0,    0,    0,    0,    0,    0,    0,   14,    0,
        0,    0,    0,    0,   10,    0,    0,    0,   15,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   28,   37,   38,   39,   34,   35,   36,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   49,   50,   48,   53,   51,   54,
        0,   77,   76,    0,    0,    0,    0,    3,    0,    0,
       12,    0,    0,    0,   10,   11,    0,    0,   15,    0,

        0,    0,    0,    4,    0,    0,    0,    5,    0,    0,
       61,    0,    0,    0,    0,    0,    0,    0,   26,    0,
       29,    0,   25,   28,   37,   38,   39,   34,   35,   36,
        0,    0,    0,    0,    0,    0,    0,   65,    0,    0,
       69,    0,    0,    0,    0,    0,   49,   50,   48,   53,
       51,   52,   54,    6,    7,    8,    0,    3,    0,    0,
       12,    0,    0,    0,   11,    0,   42,    0,    0,    0,
        0,    0,    4,    0,   13,    0,    5,    0,    0,   61,
        0,    0,    0,    0,    0,    0,    0,   26,    0,   29,
        0,   25,    0,   43,    0,   70,    0,    0,    0,   65,

        0,    0,   69,    0,    0,    0,    0,    0,   52,    6,
        7,    8,    9,    0,    0,    0,    0,    0,   62,    0,
       42,    0,    0,    0,    0,   60,    0,   13,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   17,    0,    0,
        0,    0,   44,   43,    0,   70,    0,   63,   64,    0,
       68,    0,    0,    0,    0,   55,    9,   24,    0,    1,
       16,    0,   62,    0,    0,    0,   58,   60,   72,   40,
        0,    0,    0,   18,    0,    0,    0,   17,    0,    0,
        0,    0,   27,   44,    0,    0,   63,   64,    0,   68,
        0,   73,   74,   41,   55,   24,    2,    1,   16,    0,

        0,    0,    0,   58,   72,   40,    0,    0,    0,   18,
        0,    0,    0,    0,    0,    0,   27,    0,    0,   66,
        0,   73,   74,   41,    2,   45,    0,    0,    0,    0,
       33,    0,    0,   20,   21,    0,    0,    0,    0,    0,
       46,    0,   66,    0,   45,    0,   57,    0,   59,   33,
        0,   23,   20,   21,    0,    0,    0,    0,    0,   46,
        0,   71,    0,   57,   56,   59,    0,   23,    0,    0,
        0,   32,    0,   71,    0,   56,    0,    0,   22,    0,
       30,   32,   67,    0,    0,   22,   31,   30,   67,    0,
        0,   31,   47,    0,   47,   19,   19,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    1,    1,    1,    6,
        6,    9,   10,   11,   10,   12,   13,   14,   15,   16,
       17,   14,   14,   14,   14,   14,   14,   18,    1,    1,
        6,    1,    1,    1,   19,   19,   19,   19,   20,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   21,   22,   19,
        1,   23,    1,    1,   24,    1,   25,   26,   27,   28,

       29,   30,   31,   32,   33,   19,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,    6,    1,   50,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[51] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    1,
        1,    4,    3,    3,    3,    3,    3,    3,    4,    4,
        4,    4,    3,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    1
    } ;

static yyconst flex_int16_t yy_base[502] =
    {   0,
        0,    0,   50,    0,   76,    0,   84,   99,  108,  120,
      132,  141,   89,  140,  150,  159,  167,  176,  184,  195,
      206,  217,  228,  239,  247,  258, 1019, 1020,  294, 1020,
      107,    0,    0,  304,  296,  151,  306, 1008,  193,  110,
      984,  322,  981,  978,  174,   78,  181,  976,  301,  156,
      984, 1020, 1020,  334,  237,    0,    0,  342,  334,  248,
      350, 1002,  219,  986,  972,  976,  350,  979,  231,   80,
      343,  982,  973, 1020,  346,  972,  966,  238,   94,  109,
      964,  286,  969,  314,  960,  250,  971,  315,  966,  191,
      960,  239,  972,  958,  962,  957,  202,  968,  342,  955,

      349,  391,  290,  984,    0,  396,  389,  980, 1020,  396,
      407,  414,  951,  955,  962,  950,  943,  942,  312,  958,
      943,  943,  938,  948,  379,  947,  934,  934,  412,  936,
      932,  930,  947,  934,  938,  391,  932,  136,  933,  940,
      933,  922,  928,  919,  921,  933,  931,  392,  237,  377,
      917,  435,  436,  437,  441,  442,  443,  447,  920,  312,
      919,  927,  409,  922,  418,  912,  910,  419,  414,  909,
      914,  922,  912,  920,  457,  461,  462,  463,  467,  468,
      940,  939,  460,  903,  907,  906,  913,  476,  916,  914,
      477,  913,  895,  905,  478,  482,  907,  903,  483,  484,

      902,  908,  897,  488,  902,  887,  904,  489,  891,  902,
      490,  892,  894,  892,  884,  879,  878,  879,  494,  894,
      495,  884,  496,  500,  502,  506,  507,  508,  512,  513,
      873,  888,  879,  889,  884,  875,  873,  514,  867,  871,
      519,  879,  864,  873,  862,  875,  520,  521,  525,  526,
      527,  531,  532,  533,  537,  538,  862,  539,  876,  866,
      543,  875,  874,  855,  544,  856,  545,  550,  871,  551,
      852,  865,  555,  852,  556,  851,  557,  849,  853,  561,
      858,  856,  562,  852,  843,  853,  841,  563,  848,  567,
      568,  569,  843,  573,  852,  574,  853,  836,  837,  575,

      852,  835,  579,  838,  845,  829,  843,  824,  580,  586,
      587,  592,  593,  845,  834,  839,  832,  829,  594,  832,
      598,  821,  599,  838,  833,  604,  832,  605,  831,  824,
      827,  816,  813,  606,  814,  825,  824,  610,  808,  611,
      612,  808,  616,  617,  807,  618,  806,  622,  623,  817,
      624,  805,  805,  803,  803,  628,  629,  634,  814,  636,
      638,  815,  640,  816,  799,  796,  642,  646,  650,  651,
      813,  802,  798,  652,  810,  792,  792,  656,  791,  657,
      802,  792,  658,  662,  788,  795,  663,  664,  798,  668,
      793,  669,  670,  674,  675,  676,  680,  681,  682,  796,

      789,  790,  781,  686,  688,  692,  778,  791,  775,  693,
      791,  436,  697,  788,  779,  782,  698,  766,  775,  699,
      769,  703,  704,  705,  709,  710,  787,  763,  776,  779,
      711,  770,  773,  715,  716,  717,  744,  721,  706,  652,
      722,  595,  723,  554,  727,  551,  728,  536,  729,  733,
      523,  734,  739,  740,  467,  741,  438,  383,  377,  745,
      374,  746,  362,  747,  751,  752,  753,  757,  357,  333,
      340,  759,  326,  763,  295,  764,  765,  281,  769,  278,
      770,  771,  776,  214,  165,  777,  782,  783,  784,  159,
      150,  788,  789,  116,  793,  794,  795, 1020,  133,  800,

      802
    } ;

static yyconst flex_int16_t yy_def[502] =
    {   0,
      498,    1,  498,    3,    3,    5,    3,    3,    3,    3,
        3,    3,    5,    5,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,  498,  498,  498,  498,
      498,  499,  500,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  499,  500,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,

      498,  498,  498,  501,  500,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      501,  501,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,

      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,

      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,

      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,    0,  498,  498,

      498
    } ;

static yyconst flex_int16_t yy_nxt[1071] =
    {   0,
       28,   29,   30,   29,   29,   31,   32,   33,   31,   31,
       34,   35,   36,   37,   37,   37,   37,   28,   28,   38,
       28,   28,   31,   28,   39,   28,   40,   41,   42,   28,
       43,   28,   44,   28,   45,   46,   28,   28,   47,   28,
       48,   49,   50,   28,   51,   28,   28,   28,   28,   52,
       53,   54,   30,   54,   54,   55,   56,   57,   55,   55,
       58,   59,   60,   61,   61,   61,   61,   53,   53,   62,
       53,   53,   55,   53,   63,   64,   65,   66,   67,   53,
       53,   68,   53,   53,   69,   53,   53,   53,   70,   53,
       53,   71,   72,   53,   53,   73,   53,   53,   53,   74,

       75,   53,  127,   76,  142,   77,  128,   53,  103,   53,
       78,  103,  129,   88,   79,   53,   89,   80,   53,   81,
       82,   53,   83,   69,   53,   80,  129,   90,   84,   53,
       53,  151,   53,   53,  116,   82,  104,   83,   85,   53,
       80,  134,   86,   84,   53,   53,   83,  117,  145,   80,
       85,   53,  103,   53,   86,  103,  496,   53,   83,  109,
      209,   80,   87,   53,   88,   53,   53,   89,  210,   53,
       83,   87,   53,   80,   69,   53,   91,   53,   90,   83,
      137,   53,   80,   53,   53,   91,   53,  494,   92,  493,
       53,   80,   53,   94,   95,   93,  138,   92,   53,  491,

       80,   53,   94,   95,   93,   83,  124,   53,   80,   53,
      125,  126,   53,  129,   83,   53,   96,   80,  130,  113,
       53,   53,   83,  129,  131,   80,   53,   96,  164,   53,
      171,   53,   97,   83,  114,  115,   80,   53,  103,  117,
       53,  103,   53,   97,   83,  113,   98,   80,   53,  103,
      490,   53,  103,   53,   99,   83,  109,   98,   80,   53,
      114,  115,   53,  220,   53,   99,   83,  125,  126,   80,
       53,  129,   53,   53,  125,  150,  166,   83,   53,  100,
       80,  221,  101,   53,   53,   83,  125,  160,   80,   53,
      100,  103,   53,  101,  103,  102,   83,  102,  102,   80,

      153,  154,  155,   53,  102,  106,  487,  102,  106,  107,
      107,  107,  107,  119,  102,  108,  119,  110,  485,  111,
      111,  111,  111,  119,  108,  108,  119,  133,  156,  157,
      158,  112,  484,  134,  108,  102,  232,  102,  102,  135,
      136,  113,  196,  106,  102,  102,  106,  107,  107,  107,
      107,  119,  102,  108,  119,  162,  114,  115,  120,  112,
      483,  110,  108,  111,  111,  111,  111,  143,  121,  108,
      173,  481,  113,  175,  144,  134,  176,  177,  108,  117,
      195,  480,  145,  195,  147,  479,  120,  114,  115,  178,
      179,  180,  102,  475,  102,  102,  121,  106,  473,  102,

      106,  102,  107,  107,  107,  107,  102,  196,  108,  107,
      107,  107,  107,  199,  222,  108,  199,  108,  110,  472,
      111,  111,  111,  111,  108,  471,  108,  183,  183,  183,
      183,  206,  219,  189,  207,  108,  224,  225,  226,  224,
      225,  226,  227,  228,  229,  227,  228,  229,  230,  235,
      189,  230,  237,  240,  241,  189,  434,  435,  247,  188,
      188,  247,  248,  249,  250,  248,  249,  250,  251,  253,
      470,  251,  253,  183,  183,  183,  183,  258,  261,  195,
      258,  261,  195,  265,  199,  268,  265,  199,  268,  273,
      277,  280,  273,  277,  280,  288,  290,  292,  288,  290,

      292,  224,  469,  225,  224,  252,  225,  226,  227,  228,
      226,  227,  228,  229,  230,  300,  229,  230,  300,  269,
      303,  247,  248,  303,  247,  248,  249,  250,  251,  249,
      250,  251,  309,  253,  310,  309,  253,  310,  311,  312,
      258,  311,  312,  258,  261,  265,  321,  261,  265,  321,
      467,  268,  323,  313,  268,  323,  273,  328,  277,  273,
      328,  277,  280,  334,  288,  280,  334,  288,  290,  341,
      292,  290,  341,  292,  344,  346,  300,  344,  346,  300,
      303,  309,  465,  303,  309,  269,  324,  310,  311,  463,
      310,  311,  342,  312,  357,  363,  312,  357,  363,  321,

      323,  462,  321,  323,  335,  368,  328,  334,  368,  328,
      334,  378,  380,  341,  378,  380,  341,  384,  344,  346,
      384,  344,  346,  387,  388,  390,  387,  388,  390,  395,
      357,  461,  395,  357,  324,  396,  342,  398,  396,  399,
      398,  363,  399,  404,  363,  381,  404,  368,  335,  382,
      368,  405,  406,  410,  405,  406,  410,  378,  380,  417,
      378,  380,  417,  384,  387,  388,  384,  387,  388,  390,
      422,  423,  390,  422,  423,  424,  395,  396,  424,  395,
      396,  425,  398,  399,  425,  398,  399,  404,  459,  405,
      404,  381,  405,  406,  410,  382,  406,  410,  436,  417,

      443,  436,  417,  443,  422,  423,  424,  422,  423,  424,
      425,  445,  450,  425,  445,  450,  453,  454,  436,  453,
      454,  436,  456,  460,  443,  456,  460,  443,  445,  464,
      466,  445,  464,  466,  450,  468,  458,  450,  468,  437,
      453,  454,  456,  453,  454,  456,  460,  474,  464,  460,
      474,  464,  476,  466,  477,  476,  466,  477,  468,  437,
      482,  468,  457,  482,  474,  476,  477,  474,  476,  477,
      486,  488,  482,  486,  488,  482,  455,  489,  486,  478,
      489,  486,  457,  492,  488,  489,  492,  488,  489,  492,
      495,  478,  492,  495,  495,  497,  497,  495,  497,  497,

      105,  452,  105,  105,  181,  181,  451,  449,  448,  447,
      446,  444,  442,  441,  440,  439,  438,  433,  432,  431,
      430,  429,  428,  427,  426,  421,  420,  419,  418,  416,
      415,  414,  413,  412,  411,  409,  408,  407,  403,  402,
      401,  400,  397,  394,  393,  392,  391,  389,  386,  385,
      383,  379,  377,  376,  375,  374,  373,  372,  371,  370,
      369,  367,  366,  365,  364,  362,  361,  360,  359,  358,
      356,  355,  354,  353,  352,  351,  350,  349,  348,  347,
      345,  343,  340,  339,  338,  337,  336,  333,  332,  331,
      330,  329,  327,  326,  325,  322,  320,  319,  318,  317,

      316,  315,  314,  308,  307,  306,  305,  304,  302,  301,
      299,  298,  297,  296,  295,  294,  293,  291,  289,  287,
      286,  285,  284,  283,  282,  281,  279,  278,  276,  275,
      274,  272,  271,  270,  267,  266,  264,  263,  262,  260,
      259,  257,  256,  255,  254,  182,  182,  246,  245,  244,
      243,  242,  239,  238,  236,  234,  233,  231,  223,  218,
      217,  206,  216,  215,  214,  213,  212,  211,  208,  205,
      204,  203,  202,  201,  200,  198,  197,  196,  194,  193,
      192,  191,  190,  189,  188,  187,  186,  185,  184,  112,
      182,  174,  172,  170,  169,  168,  167,  165,  163,  161,

      159,  129,  152,  149,  148,  146,  137,  141,  118,  117,
      140,  112,  139,  132,  123,  122,  118,  112,  498,   27,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498
    } ;

static yyconst flex_int16_t yy_chk[1071] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        5,    5,   46,    5,   70,    5,   46,    5,   31,    7,
        5,   31,   70,   13,    5,    7,   13,    5,   13,    5,
        7,    5,    7,   13,    8,    7,   79,   13,    7,    7,
        8,   79,   13,    9,   40,    8,  499,    8,    9,    9,
        8,   80,    9,    8,    8,   10,    9,   40,   80,    9,
       10,   10,   36,    9,   10,   36,  494,   11,   10,   36,
      138,   10,   11,   11,   14,   10,   12,   14,  138,   14,
       11,   12,   12,   11,   14,   15,   15,   11,   14,   12,
       50,   15,   12,   14,   16,   16,   12,  491,   15,  490,
       16,   15,   17,   17,   17,   15,   50,   16,   17,  485,

       16,   18,   18,   18,   16,   17,   45,   18,   17,   19,
       45,   45,   17,   47,   18,   19,   19,   18,   47,   39,
       20,   18,   19,   90,   47,   19,   20,   20,   90,   19,
       97,   21,   21,   20,   39,   39,   20,   21,   55,   97,
       20,   55,   22,   22,   21,   63,   21,   21,   22,   60,
      484,   21,   60,   23,   23,   22,   60,   22,   22,   23,
       63,   63,   22,  149,   24,   24,   23,   69,   69,   23,
       24,   92,   25,   23,   78,   78,   92,   24,   25,   25,
       24,  149,   25,   26,   24,   25,   86,   86,   25,   26,
       26,  103,   25,   26,  103,   29,   26,   29,   29,   26,

       82,   82,   82,   26,   29,   34,  480,   34,   34,   35,
       35,   35,   35,  119,   34,   35,  119,   37,  478,   37,
       37,   37,   37,   42,   35,   37,   42,   49,   84,   84,
       84,   42,  475,   49,   37,   54,  160,   54,   54,   49,
       49,   88,  160,   58,   54,   58,   58,   59,   59,   59,
       59,   67,   58,   59,   67,   88,   88,   88,   42,   67,
      473,   61,   59,   61,   61,   61,   61,   71,   42,   61,
       99,  471,   75,  101,   71,   71,  101,  101,   61,   99,
      125,  470,   71,  125,   75,  469,   67,   75,   75,  101,
      101,  101,  102,  463,  102,  102,   67,  106,  461,  106,

      106,  102,  107,  107,  107,  107,  106,  150,  107,  110,
      110,  110,  110,  129,  150,  110,  129,  107,  111,  459,
      111,  111,  111,  111,  110,  458,  111,  112,  112,  112,
      112,  136,  148,  148,  136,  111,  152,  153,  154,  152,
      153,  154,  155,  156,  157,  155,  156,  157,  158,  163,
      163,  158,  165,  168,  169,  169,  412,  412,  175,  165,
      168,  175,  176,  177,  178,  176,  177,  178,  179,  180,
      457,  179,  180,  183,  183,  183,  183,  188,  191,  195,
      188,  191,  195,  196,  199,  200,  196,  199,  200,  204,
      208,  211,  204,  208,  211,  219,  221,  223,  219,  221,

      223,  224,  455,  225,  224,  179,  225,  226,  227,  228,
      226,  227,  228,  229,  230,  238,  229,  230,  238,  200,
      241,  247,  248,  241,  247,  248,  249,  250,  251,  249,
      250,  251,  252,  253,  254,  252,  253,  254,  255,  256,
      258,  255,  256,  258,  261,  265,  267,  261,  265,  267,
      451,  268,  270,  256,  268,  270,  273,  275,  277,  273,
      275,  277,  280,  283,  288,  280,  283,  288,  290,  291,
      292,  290,  291,  292,  294,  296,  300,  294,  296,  300,
      303,  309,  448,  303,  309,  268,  270,  310,  311,  446,
      310,  311,  291,  312,  313,  319,  312,  313,  319,  321,

      323,  444,  321,  323,  283,  326,  328,  334,  326,  328,
      334,  338,  340,  341,  338,  340,  341,  343,  344,  346,
      343,  344,  346,  348,  349,  351,  348,  349,  351,  356,
      357,  442,  356,  357,  323,  358,  341,  360,  358,  361,
      360,  363,  361,  367,  363,  340,  367,  368,  334,  340,
      368,  369,  370,  374,  369,  370,  374,  378,  380,  383,
      378,  380,  383,  384,  387,  388,  384,  387,  388,  390,
      392,  393,  390,  392,  393,  394,  395,  396,  394,  395,
      396,  397,  398,  399,  397,  398,  399,  404,  440,  405,
      404,  380,  405,  406,  410,  380,  406,  410,  413,  417,

      420,  413,  417,  420,  422,  423,  424,  422,  423,  424,
      425,  426,  431,  425,  426,  431,  434,  435,  436,  434,
      435,  436,  438,  441,  443,  438,  441,  443,  445,  447,
      449,  445,  447,  449,  450,  452,  439,  450,  452,  413,
      453,  454,  456,  453,  454,  456,  460,  462,  464,  460,
      462,  464,  465,  466,  467,  465,  466,  467,  468,  436,
      472,  468,  438,  472,  474,  476,  477,  474,  476,  477,
      479,  481,  482,  479,  481,  482,  437,  483,  486,  467,
      483,  486,  456,  487,  488,  489,  487,  488,  489,  492,
      493,  477,  492,  493,  495,  496,  497,  495,  496,  497,

      500,  433,  500,  500,  501,  501,  432,  430,  429,  428,
      427,  421,  419,  418,  416,  415,  414,  411,  409,  408,
      407,  403,  402,  401,  400,  391,  389,  386,  385,  382,
      381,  379,  377,  376,  375,  373,  372,  371,  366,  365,
      364,  362,  359,  355,  354,  353,  352,  350,  347,  345,
      342,  339,  337,  336,  335,  333,  332,  331,  330,  329,
      327,  325,  324,  322,  320,  318,  317,  316,  315,  314,
      308,  307,  306,  305,  304,  302,  301,  299,  298,  297,
      295,  293,  289,  287,  286,  285,  284,  282,  281,  279,
      278,  276,  274,  272,  271,  269,  266,  264,  263,  262,

      260,  259,  257,  246,  245,  244,  243,  242,  240,  239,
      237,  236,  235,  234,  233,  232,  231,  222,  220,  218,
      217,  216,  215,  214,  213,  212,  210,  209,  207,  206,
      205,  203,  202,  201,  198,  197,  194,  193,  192,  190,
      189,  187,  186,  185,  184,  182,  181,  174,  173,  172,
      171,  170,  167,  166,  164,  162,  161,  159,  151,  147,
      146,  145,  144,  143,  142,  141,  140,  139,  137,  135,
      134,  133,  132,  131,  130,  128,  127,  126,  124,  123,
      122,  121,  120,  118,  117,  116,  115,  114,  113,  108,
      104,  100,   98,   96,   95,   94,   93,   91,   89,   87,

       85,   83,   81,   77,   76,   73,   72,   68,   66,   65,
       64,   62,   51,   48,   44,   43,   41,   38,   27,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../lexer.lex"
#line 6 "../lexer.lex"
#include <stdio.h>
#include <string.h>
#include "miro.h"
#include "parse.cpp.h"

int yyline=1;












#line 873 "../lexer.cpp"

#define INITIAL 0
#define global 1
#define camera 2
#define triangle 3
#define mesh 4
#define instance 5
#define light 6
#define pointlight 7
#define dirlight 8
#define areaLight 9
#define sphere 10
#define square 11
#define material_phong 12

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 39 "../lexer.lex"


#line 1080 "../lexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 499 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 498 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 41 "../lexer.lex"
{ return ENABLE; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 42 "../lexer.lex"
{ return DISABLE; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 43 "../lexer.lex"
{ return MATH_COS; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 44 "../lexer.lex"
{ return MATH_SIN; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 45 "../lexer.lex"
{ return MATH_TAN; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 46 "../lexer.lex"
{ return MATH_ACOS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 47 "../lexer.lex"
{ return MATH_ASIN; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 48 "../lexer.lex"
{ return MATH_ATAN; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 49 "../lexer.lex"
{ return MATH_ATAN2; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 50 "../lexer.lex"
{ return MATH_LN; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 51 "../lexer.lex"
{ return MATH_LOG; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 52 "../lexer.lex"
{ return MATH_EXP; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 53 "../lexer.lex"
{ return MATH_SQRT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 54 "../lexer.lex"
{ return MATH_E; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 55 "../lexer.lex"
{ return MATH_PI; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 57 "../lexer.lex"
{ yy_push_state(global); return GLOBAL; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 58 "../lexer.lex"
{ return WIDTH; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 59 "../lexer.lex"
{ return HEIGHT; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 60 "../lexer.lex"
{ return BGCOLOR; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 61 "../lexer.lex"
{return SAMPLESX;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 62 "../lexer.lex"
{return SAMPLESY;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 63 "../lexer.lex"
{return SHUTTERTIME;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 64 "../lexer.lex"
{return PATHTRACE;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 66 "../lexer.lex"
{ yy_push_state(camera); return CAMERA; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 67 "../lexer.lex"
{ return POS; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 68 "../lexer.lex"
{ return DIR; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 69 "../lexer.lex"
{ return LOOKAT; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 70 "../lexer.lex"
{ return UP; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 71 "../lexer.lex"
{ return FOV; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 72 "../lexer.lex"
{return FOCALLENGTH;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 73 "../lexer.lex"
{return APERTURESIZE;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 74 "../lexer.lex"
{return FOCALPOINT;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 76 "../lexer.lex"
{ yy_push_state(triangle); return TRIANGLE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 77 "../lexer.lex"
{ return V1; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 78 "../lexer.lex"
{ return V2; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 79 "../lexer.lex"
{ return V3; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 80 "../lexer.lex"
{ return N1; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 81 "../lexer.lex"
{ return N2; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 82 "../lexer.lex"
{ return N3; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 84 "../lexer.lex"
{ yy_push_state(square); return SQUARE;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 85 "../lexer.lex"
{ return CENTER; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 87 "../lexer.lex"
{ yy_push_state(mesh); return MESH; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 88 "../lexer.lex"
{ return LOAD; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 89 "../lexer.lex"
{ return GROUP; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 91 "../lexer.lex"
{ yy_push_state(instance); return INSTANCE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 92 "../lexer.lex"
{ return GEOMETRY; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 94 "../lexer.lex"
{yy_push_state(material_phong); return MATERIAL_PHONG;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 95 "../lexer.lex"
{return ME;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 96 "../lexer.lex"
{return MA;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 97 "../lexer.lex"
{return MD;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 98 "../lexer.lex"
{return MS;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 99 "../lexer.lex"
{return MSP;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 100 "../lexer.lex"
{return MR;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 101 "../lexer.lex"
{return MT;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 102 "../lexer.lex"
{return INDEX;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 104 "../lexer.lex"
{ return PUSHMATRIX; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 105 "../lexer.lex"
{ return POPMATRIX; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 106 "../lexer.lex"
{ return ROTATE; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 107 "../lexer.lex"
{ return TRANSLATE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 108 "../lexer.lex"
{ return SCALE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 109 "../lexer.lex"
{ return VELOCITY;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 111 "../lexer.lex"
{ yy_push_state(light); return LIGHT; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 112 "../lexer.lex"
{ yy_pop_state(); yy_push_state(pointlight); return POINTLIGHT; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 113 "../lexer.lex"
{ return COLOR; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 114 "../lexer.lex"
{ return POS; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 115 "../lexer.lex"
{ return WATTAGE; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 117 "../lexer.lex"
{ yy_pop_state(); yy_push_state(dirlight); return DIRLIGHT; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 118 "../lexer.lex"
{ return COLOR;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 119 "../lexer.lex"
{ return DIR;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 121 "../lexer.lex"
{ yy_pop_state(); yy_push_state(areaLight); return AREALIGHT;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 122 "../lexer.lex"
{return INTENSITY;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 124 "../lexer.lex"
{ yy_push_state(sphere); return SPHERE; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 125 "../lexer.lex"
{ return CENTER; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 126 "../lexer.lex"
{ return RADIUS; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 128 "../lexer.lex"
{
  yylval.integer = atoi(yytext);
  return PARSE_INT;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 133 "../lexer.lex"
{
  yylval.real = atof(yytext);
  return REAL;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 138 "../lexer.lex"
{
  yylval.str = strdup(yytext);
  return STRING;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 143 "../lexer.lex"
{ // C style comments
  register int c;
  for ( ; ; ) {
    while ((c = yyinput()) != '*' && c != EOF ) if (c == '\n') yyline++;
    if ( c == '*' ) {
      while ( (c = yyinput()) == '*' ) if (c == '\n') yyline++;
	  if ( c == '/' )
	    break;    /* found the end */
      if ( c == EOF ) {
	    fprintf(stderr, "EOF in comment");
	    printf("Press Enter to continue...");
	  }
	}
  }
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 160 "../lexer.lex"
{
  return yytext[0];
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 164 "../lexer.lex"
{
  yy_pop_state();
  return yytext[0];
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 169 "../lexer.lex"
// eat up comments 
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 171 "../lexer.lex"
// eat up whitespace
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 173 "../lexer.lex"
{ yyline++; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 175 "../lexer.lex"
{ 
  printf("\nParse error line %d near: %s\n", yyline, yytext); 
  printf("Press Enter to continue...");
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 180 "../lexer.lex"
ECHO;
	YY_BREAK
#line 1616 "../lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(global):
case YY_STATE_EOF(camera):
case YY_STATE_EOF(triangle):
case YY_STATE_EOF(mesh):
case YY_STATE_EOF(instance):
case YY_STATE_EOF(light):
case YY_STATE_EOF(pointlight):
case YY_STATE_EOF(dirlight):
case YY_STATE_EOF(areaLight):
case YY_STATE_EOF(sphere):
case YY_STATE_EOF(square):
case YY_STATE_EOF(material_phong):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 499 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 499 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 498);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 180 "../lexer.lex"



